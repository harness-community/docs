"use strict";(self.webpackChunkharness_community=self.webpackChunkharness_community||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"handbook-troubleshooting-guide","metadata":{"permalink":"/blog/handbook-troubleshooting-guide","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-11-Troubleshooting-CI-Errors/troubleshooting-ci-guide.md","source":"@site/blog/2022-10-11-Troubleshooting-CI-Errors/troubleshooting-ci-guide.md","title":"A handbook on troubleshooting frequently encountered errors for the users on Harness CI","description":"Introduction","date":"2022-10-11T00:00:00.000Z","formattedDate":"October 11, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"harness-ci","permalink":"/blog/tags/harness-ci"},{"label":"troubleshooting-guide","permalink":"/blog/tags/troubleshooting-guide"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":6.09,"hasTruncateMarker":false,"authors":[{"name":"Dhrubajyoti Chakraborty","title":"Community Engineering Intern","url":"https://github.com/codewdhruv","imageURL":"https://media-exp1.licdn.com/dms/image/C5603AQFvCMGToV9LMQ/profile-displayphoto-shrink_800_800/0/1631719718974?e=1670457600&v=beta&t=vWbeVBiAvAYLTdxYcAnIqzuvveJ8IWleCDV0A5Fdbp0","key":"dhrubajyoti"}],"frontMatter":{"slug":"handbook-troubleshooting-guide","title":"A handbook on troubleshooting frequently encountered errors for the users on Harness CI","authors":["dhrubajyoti"],"tags":["continuous-integration","harness-ci","troubleshooting-guide","cme"]},"nextItem":{"title":"Beginners Guide to Git Connectors","permalink":"/blog/git-connector"}},"content":"## Introduction\\n\\nThis is a guide to get started with the common use cases for the end users to implement pipeline executions successfully in Harness CI\\n\\nHarness provides various sources & tools to easily troubleshoot frequently encountered errors to fix pipeline failures. This guide lists some of the common issues faced while implementing and designing pipelines in Harness CI and the possible solutions.\\n\\n**What\u2019ll we be covering here?**\\n\\n- Syntax Verification\\n- Variable Verification\\n- Troubleshooting Delegate Installation Errors\\n- Troubleshooting Triggers Errors\\n- Troubleshooting Git Experience Errors\\n\\n\\n### Verify Syntax\\n\\nAn early-stage error use case is generally incorrect syntax. In such cases, the pipeline returns an invalid YAML syntax message and does not start running in case any syntax error is detected.\\n\\nEdit ```pipeline.yaml``` in the pipeline studio\\n\\nThe pipeline editor in the YAML view is recommended for editing experience (rather than the graphical stage view). Major features in the editor include:\\n- Creation of connectors, secrets & pipelines from scratch\\n- Realtime schema validation\\n- Intellisense & auto-completion\\n- Field descriptions & rich inline documentation\\n- Free Templates for YAML Samples \\n\\nThis feature helps the developer to validate the existing pipeline\u2019s correctness and helps in quick modification alongside copying of a pipeline as a code.\\n\\n\\n### Verify Variables\\n\\nA very integral part of troubleshooting errors in Harness CI is to verify the variables present in the pipeline and their values. Major configuration in the pipeline depends on the variables and verifying them becomes the easiest way to reach the root cause and potential solution of the problem.\\n\\nVisit the variables section on the Harness CI platform. Check if the expected variables and their values match and are implemented at the expected stage for the pipeline.\\n\\n### Delegate Setup Failure\\n\\nThe majority of the encountered errors in Harness CI revolve around delegate setup processes. Make sure you have a complete understanding of how to set up a harness delegate from scratch & understand how the Harness manager and delegate complement each other.\\n\\nDelegate setup also fails if the SSH key used for deployment to the targeted host is incorrect. This usually happens due to incorrect information about the SSH configuration in the Harness Secrets Management and also if the targeted host is not configured to support SSH connections.\\n\\nFor troubleshooting move to the ```watcher.log``` file that provides information about the deleted version.\\n\\n### Delegate fails to establish a connection with the Harness Manager\\n\\nIn case of connection failures for the delegate with the Harness Manager, we can use ping on the delegate host to test the response time for app.harness.io and other URLs are consistent or not. We can use the traceroute to check the network route and verify if there is any case of redirection. To verify if the DNS resolution is working fine we can implement nslookup.\\nWe can flush the client\'s DNS cache (Check for the OS). We can run tests to check for local network errors or NAT license limits. In the case of cloud service providers, we\u2019ll have to ensure that the security groups have outbound traffic allowed on HTTP 443.\\n\\n### No eligible delegate found for the assigned pipeline execution\\n\\nThis error is encountered when the delegate fails to achieve the URL criteria for validation. All delegates in harness are identified by their Harness account ID with some additional factors. For example, in VMs the delegates are identified with the combination of their hostname and IP address thus in case the IP changes the Harness Manager fails to identify the delegate. In the case of K8s and ECS delegates, the IP changes when the pod is rescheduled.\\n\\nThe delegate sends the heartbeat, deployment data & Time series, and log data for continuous verification to the Harness Manager. The credentials used by the Delegate must have the roles and permissions required to perform the task. For example, if the account used for an AWS Cloud Provider does not have the roles required for ECS deployments then it will fail.\\n\\nFor more information visit [How does Harness Manager Identify Delegates?](https://docs.harness.io/article/migeq3achl-harness-delegate-faqs#how_does_harness_manager_identify_delegates)\\n\\n### K8s Delegate Deletion Failure\\n\\nTo delete the Harness Delegate from the K8s cluster we\u2019ll have to delete the StateFulSet for the delegate. This ensures that the expected number of pods is running and available. Deletion of the delegate without deletion of the StateFulSet results in a recreation of the pod. \\n\\nFor example, if the delegate name is ```delegate-sample``` then we can delete StateFulSet with the command below\\n\\n```bash\\n$ kubectl delete statefulset -n harness-delegate delegate-sample\\n```\\n\\n### Triggers Rejection Failures\\n\\nThis usually happens when the user uses a webhook trigger to execute a pipeline or workflow and the name of the artifact in the cURL command is different from the name of the artifact.\\n\\n```bash\\nTrigger Rejected. Reason: Artifacts Are Missing for Service Name(S)\\n```\\n\\nThis is majorly a result of a bad name for an artifact build version when placed in the cURL command. For example a cURL with build number **v1.0.4-RC8:**\\n\\n```bash\\ncurl -X POST -H \'content-type: application/json\'\\n--url https://app.harness.io/gateway/api/webhooks/... . .\\n-d \'{\\"application\\":\\"tavXGH . . z7POg\\",\\"artifacts\\":[\\n{\\"service\\":\\"app\\",\\"buildNumber\\":\\"v1.0.4-RC8\\"}]}\'\\n```\\n\\nIn case the Harness Service artifacts have a different nomenclature the cURL command will fail to execute. Thus ensuring the webhook cURL command has the correct artifact name becomes very important. \\n\\n### Failure when executed Git Push in Harness\\n\\nIn case of two-way sync between the Git repository and the Harness Application, the push to Harness will result in failure unless the GIT YAML files and the required settings are configured before pushing the app to Harness.\\n\\nFor example, in case we have a predefined infrastructure definition and the required labels or parameters are not filled or filled in incorrectly the push to git is more likely to encounter a failure.\\n\\nUsing the Harness Manager to configure the app at first is the best way to encounter this error. This generally ensures that all the required settings are configured correctly and synced with the git repository. \\n\\n### Triggers: zsh: no matches found\\n\\nIn some of the OS versions specifically in MACOS, the default shell is zsh. The zsh shell requires the cURL command to not use the \u201c?\u201d character or put quotes around the URL.\\n\\nFor example;\\n```bash\\ncurl -X POST -H \'content-type: application/json\' --url https://app.harness.io/gateway/api/webhooks/xxx?accountId=xxx -d \'{\\"application\\":\\"fCLnFhwsTryU-HEdKDVZ1g\\",\\"parameters\\":{\\"Environment\\":\\"K8sv2\\",\\"test\\":\\"foo\\"}}\'\\n```\\n\\nThis shall work\\n\\n```bash\\ncurl -X POST -H \'content-type: application/json\' --url \\"https://app.harness.io/gateway/api/webhooks/xxx?accountId=xxx -d \'{\\"application\\":\\"fCLnFhwsTryU-HEdKDVZ1g\\",\\"parameters\\":{\\"Environment\\":\\"K8sv2\\",\\"test\\":\\"foo\\"}}\'\\"\\n```\\n\\n### User does not have \\"Deployment: execute\\" permission\\n\\nThe error User does not have ```\\"Deployment: execute\\"``` permission reflects back to the user\u2019s **Application Permission > Settings** does not involve ```execute```. This can be solved by resolving the application permission configuration. The user can easily modify the Harness Configure as Code YAML files for the harness application. \\n\\nTo enable editing of the YAML file make sure the user\u2019s Harness User Groups must have the account permission ```Manage Applications``` enabled. Also the Application Permissions ```Update``` enabled for specific applications\\n\\n### NOT ABLE TO TROUBLESHOOT THE ENCOUNTERED ERROR\\n\\nIn case the user is unable to troubleshoot the application error or pipeline execution failures the user can log/submit a ticket to Harness Support. To log a ticket follow the process:\\n\\n1. Click the **Help** button in the Harness Manager\\n2. Click **Submit a Ticket** or **Send Screenshot**\\n3. Fill out the pop up form and click **Submit Ticket** or **Send Feedback**"},{"id":"git-connector","metadata":{"permalink":"/blog/git-connector","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-09-git-connector/git-connector.md","source":"@site/blog/2022-10-09-git-connector/git-connector.md","title":"Beginners Guide to Git Connectors","description":"Are you confused with terminologies like Access Token, Access Control, and Personal Access Token while creating connectors? In this article, we will discuss a few such terminologies on the Harness platform, what they mean and what values should be entered against them.","date":"2022-10-09T00:00:00.000Z","formattedDate":"October 9, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"continuous-delivery","permalink":"/blog/tags/continuous-delivery"},{"label":"connectors","permalink":"/blog/tags/connectors"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":2.92,"hasTruncateMarker":false,"authors":[{"name":"Debabrata Panigrahi","title":"Software Engineer","url":"https://github.com/Debanitrkl","imageURL":"https://github.com/Debanitrkl.png","key":"debabrata"}],"frontMatter":{"slug":"git-connector","title":"Beginners Guide to Git Connectors","authors":["debabrata"],"tags":["continuous-integration","continuous-delivery","connectors","harness","cme"]},"prevItem":{"title":"A handbook on troubleshooting frequently encountered errors for the users on Harness CI","permalink":"/blog/handbook-troubleshooting-guide"},"nextItem":{"title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","permalink":"/blog/git-connector"}},"content":"Are you confused with terminologies like Access Token, Access Control, and Personal Access Token while creating connectors? In this article, we will discuss a few such terminologies on the Harness platform, what they mean and what values should be entered against them. \\n\\nSo, in Harness when you are using CI/CD to build or deploy we need access to your source code repository and the enterprise cloud for deployments, and hence encrypted secrets are asked as input. In this blog, I have focused on the common errors faced by beginners while trying to setup GitHub connectors. \\n\\nTo begin with:\\n\\n1. Select new connector and from the new connector tab select Github under Code Repositories\\n\\n    ![Connector Location](connector-location.png)\\n\\n2. Now it\u2019s time to give a name to your connector, but there\u2019s some [entity name convention](https://docs.harness.io/article/7rsydu6iq2) which you need to follow while naming it. \\nSome common errors observed here are :\\nFor ease of understanding across orgs and easy identification, you can also add tags and give an apt description to your connector. \\n\\n    ![Overview](./overview.png)\\n\\n3. It\u2019s time for one of the most confusing steps of the process, giving the exact address for your connector which comes in two levels\\n    1. Account \\n    2. Repository\\n\\n    What\u2019s most intriguing and that first time user\u2019s like me, made a mistake in selecting the connection type,  so the suggested method is HTTP for first timers for ease of use and you can fetch this URL for your repository directly from the search bar of your browser or from local clone information available in the repository, which has the following format ``https://github.com/<account-name>`` for account URL\u2019s type and ``https://github.com/<account-name>/<repository-name>`` for Repository URLs.   \\n\\n    ![Details](./details.png)\\n\\n4. Now, it\u2019s time to add credentials, which are required for the authentication to GitHub repository. \\n\\n    ![Credentials](./credentials.png)\\n\\n    The value in the username field is the same as your GitHub username, and now the most crucial step of adding credentials, is adding the Personal Access Token as a secret, for that, you need to generate the PAT for your account by allowing adequate repo source control permission, which could be done by following the steps [here](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-token). Further if you already have a PAT as a secret you could just skip to selecting the same, or else you need to add the generated PAT by selecting the \u201c+New Secrets\u201d and mentioning the PAT under the \u201cSecret Value\u201d field.\\n\\n    ![Secrets](./secrets.png)\\n    \\n    Be careful not to add your GitHub password under the secrets for GitHub, as some users tend to do this and the connector fails to connect. \\n\\n5. Now while connecting to the provider it\u2019s suggested to go for the connect through delegate step as it would allow delegates to perform tasks for you based on your requirements. \\n\\n    ![Delegate-Setup](./delegate-setup.png)\\n\\n6. Going further to the Delegate Setup step, I would suggest using any available delegate as a beginner, or if you want to use a particular delegate, select the same and click on the empty field under the same to select and add the delegates. \\n\\n7. What\u2019s important to consider here is if you\u2019re an absolute beginner using Harness for the first time, or have never created a delegate, please consider creating a delegate first by selecting the \u201cInstall new delegate\u201d and following the resources mentioned [here](https://docs.harness.io/article/0slo2gklsy-delegate-how-tos), to move forward and add a connector. \\n\\n\\nNeed further help? \\nFeel free to ask questions at [community.harness.io](https://community.harness.io/c/harness/7) or  [join](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) community slack to chat with our engineers in product-specific channels like:\\n\\n1. [#continuous-delivery](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw)  Get support regarding the CD Module of Harness.\\n2. [#continuous-integration](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) Get support regarding the CI Module of Harness."},{"id":"git-connector","metadata":{"permalink":"/blog/git-connector","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-09-install-delegate-minikube/installing_kubernetes_delegate.md","source":"@site/blog/2022-10-09-install-delegate-minikube/installing_kubernetes_delegate.md","title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","description":"Before we begin :","date":"2022-10-09T00:00:00.000Z","formattedDate":"October 9, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"continuous-delivery","permalink":"/blog/tags/continuous-delivery"},{"label":"connectors","permalink":"/blog/tags/connectors"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":2.06,"hasTruncateMarker":false,"authors":[{"name":"Krishika Singh","title":"Community Engineer @ Harness","url":"https://github.com/krishi0408","imageURL":"https://github.com/krishi0408.png","key":"krishikasingh"}],"frontMatter":{"slug":"git-connector","title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","authors":["krishikasingh"],"tags":["continuous-integration","continuous-delivery","connectors","harness","cme"]},"prevItem":{"title":"Beginners Guide to Git Connectors","permalink":"/blog/git-connector"},"nextItem":{"title":"Getting started with the Harness Platform","permalink":"/blog/harness-getting-started"}},"content":"## Before we begin :\\nLet us understand what do we mean by delegates and why is it needed \\n\\nA Harness delegate is a software that you install in your deployment target environment such as local network ,VPC,or cluster and run as a service.The delegate performs all operations including deployment and integration.\\nThe delegate connects all your artifacts,infrastructure,collaboration,verification and other providers with the Harness Manager.\\n\\n\\nBelow we have discussed the detailed explanation of how we can install Kubernetes(K8s) delegate.\\n\\n## Prerequisites \\n- Hypervisor technology (VirtualBox, VMWare, etc) is a mandate pre-requisite for Minikube and we have to choose the right one based on the platform we are on.\\n\\n     [Prequisites for minikube](https://minikube.sigs.k8s.io/docs/start/#what-youll-need)\\n\\n- Installation section in the Minikube Getting Started documentation is well crafted and has steps for all Linux, Mac & Windows along with the architecture and installer type details and the user just has to choose the required details, get the commands and run them!\\n\\n    [Installing Minikube](https://minikube.sigs.k8s.io/docs/start/).\\n\\n- Minikube will download the required kubectl as part of the installation and configures it.\\n\\n## Installing Harness Delegate\\n\\n- Go to  [Harness](https://app.harness.io)\\n\\n- Go to Builds and under Project setup click delegates and then click on new delegates \\n![delegate](4.png)\\n\\n\\n- Click on kubernetes\\n\\n   ![kubernetes](5.png)\\n\\n- **Name** your delegate and select the **size of delegate** and also select delegate permissions.\\nPlease follow the correct naming convention for naming a delegate.\\n   - It will show error when you insert any special characters except \u2018-\u2019 and make  sure name should not start or end with a number \\n  ![delegate](6.png)\\n\\n> NOTE:These sizing requirements are for the Delegate only.Your cluster will require more memory for Kubernetes, the operating system, and other services,preferably one should have double the memory and node present in the cluster than that of required for the delegate for smooth functioning.\\n\\n- Download the yaml file\\n  ![yaml](7.png)\\n\\n- After clicking on continue open the new terminal and open the directory where you have downloaded the yaml file  and then run the following command:\\n\\n    ```kubectl apply -f harness-delegate.yml```\\n\\n  ![download](8.png)\\n\\n- It may take few minutes for verification,after successful installation of delegate following message will be displayed:\\n\\n![download2](9.png)\\n\\n- You can go to the delegate section in the project setup and see the delegate you have installed:\\n\\n![delegate option](10.png)\\n\\n- You can also delete your delegate when no longer in use  \\n\\n> Note: Our Kubernetes Delegates are immutable , that is you can only create and delete the delegate but you can\u2019t make any changes to them."},{"id":"harness-getting-started","metadata":{"permalink":"/blog/harness-getting-started","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-07-Harness-Platform/getting_start_harness_platform.md","source":"@site/blog/2022-10-07-Harness-Platform/getting_start_harness_platform.md","title":"Getting started with the Harness Platform","description":"Hey\xa0!! new to the Harness Platform, we are here to help you find your way around.","date":"2022-10-07T00:00:00.000Z","formattedDate":"October 7, 2022","tags":[{"label":"harness","permalink":"/blog/tags/harness"},{"label":"beginners-guide","permalink":"/blog/tags/beginners-guide"},{"label":"getting-started","permalink":"/blog/tags/getting-started"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":4.74,"hasTruncateMarker":false,"authors":[{"name":"Krishika Singh","title":"Community Engineer @ Harness","url":"https://github.com/krishi0408","imageURL":"https://github.com/krishi0408.png","key":"krishikasingh"}],"frontMatter":{"slug":"harness-getting-started","title":"Getting started with the Harness Platform","authors":["krishikasingh"],"tags":["harness","beginners-guide","getting-started","cme"]},"prevItem":{"title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","permalink":"/blog/git-connector"},"nextItem":{"title":"Harness CI Onboarding - Beginners Guide","permalink":"/blog/harness-ci-onboarding"}},"content":"Hey\xa0!! new to the **Harness Platform**, we are here to help you find your way around.\\n\\nHarness is the industry\'s first **Software Delivery Platform** to use AI to simplify your DevOps processes\u200a-\u200aCI, CD, Feature Flags, Cloud Costs, and much more.\\n\\nLet\'s get started with a short introductory video about the harness platform.\\n\\n\\n<iframe width=\\"640\\" height=\\"480\\" src=\\"https://www.youtube.com/embed/I4sbENt4IeM\\" frameborder=\\"0\\" allow=\\"autoplay; encrypted-media\\" allowfullscreen > </iframe>\\n\\nHope you have got an idea of how interesting is the Harness Platform.\\n\\nDon\'t forget to [signup](https://app.harness.io/auth/#/signin) at Harness platform to play around with the product.\\n\\nLet\'s dive deep and explore our products so that we can help you around with your goals.\\n\\nBefore starting we highly recommend you to go through some basic [key concepts](https://docs.harness.io/article/hv2758ro4e-learn-harness-key-concepts) about Harness Platform.\\n\\n# Harness CI(Continuous Integration)\\n\\nHarness CI simplifies the development and testing of code. In Harness Pipelines, you visually model your build and test processes as CI Stages. Each Stage includes steps for building, testing, and pushing your code.\\n\\nWell let\'s get you started with your first pipeline, and we are sure you are going to enjoy it, Harness has step by step guide for building different sample pipelines for different languages, you can try any one of them or all of them:\\n\\n- [Python Sample Pipeline](https://github.com/harness-community/python-pipeline-samples)\\n- [Node Sample Pipeline](https://github.com/harness-community/nodejs-pipeline-samples)\\n- [Go Sample Pipeline](https://docs.harness.io/article/x0d77ktjw8-ci-pipeline-quickstart)\\n\\nDon\'t forget to through the docs as well as the courses:\\n\\n- [Harness CI docs](https://docs.harness.io/category/zgffarnh1m-ci-category)\\n- [Harness CI University](https://university.harness.io/page/continuous-integration)\\n\\n# Harness CD(Continuous Delivery)\\n\\nHarness CD is a Self-Service Continuous Delivery module that enables engineers to deploy on-demand without scripts, plugins, version dependencies, toil, downtime, and anger.\\n\\nIn each Stage, you define what you want to deploy using Services, where you want to deploy it using Environments, and how you want to deploy it using Execution steps.\\nYou can refer to the docs below and get familiar with some basics as well deployment tutorials.\\n\\nYou can go through the following docs to get familiar with the basics as well as deployment tutorials as well as sample CD pipeline for you to try out:\\n\\n- [CD Sample Pipeline](https://github.com/harness-community/cd-pipeline-sample)\\n- [CD how to](https://docs.harness.io/category/pfzgb4tg05-howto-cd)\\n\\nYou can go through Harness docs as well as Harness University courses to get clarity on Harness CD:\\n\\n- [Harness CD Docs](https://docs.harness.io/category/pfzgb4tg05-howto-cd)\\n- [Harness CD University](https://university.harness.io/page/continuous-delivery)\\n\\n# Feature Flags \\n\\nEmpower product development teams to quickly release new features, with minimal risk. Test with a specified subset, or roll out to all customers.\\n\\n**Feature flags** create private swim lanes for developers where they can ship the feature directly to customers and then control who sees it, get feedback and turn it on and off when needed.\\n\\nWe recommend you follow the below blog and implement your first feature flag, I am sure you are going to love the way it works:\\n\\n- [Implement your first Feature Flag](https://harness.io/blog/implement-your-first-feature-flag)\\n\\nThere are some well curated courses as well as docs on Feature Flags that will help you get a much deeper insight into the product\xa0:\\n\\n- [Harness Feature Flags Docs](https://docs.harness.io/category/vjolt35atg-feature-flags)\\n- [Harness Feature Flags University Course](https://university.harness.io/page/harness-feature-flags)\\n\\n\\n# Cloud Cost Management(CCM)\\n\\nHarness Cloud Cost Management empowers engineers with cloud cost visibility of their apps, microservices, and clusters. The best part? Tagging isn\'t required.\\n\\nHarness provides curated docs as well as courses that can surely help you out with the concept of CCM:\\n\\n- [Harness CCM docs](https://docs.harness.io/category/exgoemqhji-ccm)\\n- [Harness CCM University Course](https://university.harness.io/page/harness-cloud-cost-management)\\n\\n# Service Reliability Management\\n\\nHarness Service Reliability Management (SRM) module helps engineering and DevOps teams to balance feature velocity and bug fixes along with the stability and reliability needs in a production environment.\\n\\nYou can refer to the below docs as well as some organized courses and get yourself onboard with the basics as well the usage of Service Reliability Management:\\n\\n- [Harness SRM Blogs](https://docs.harness.io/category/ko19u4brsv-howtos-service-reliability-management)\\n\\nThose who want to try out SRM, we recommend them to go through the Harness SRM Practitioner exam it will help you in gaining much deeper product knowledge:\\n- [SRM Practitioner Exam](https://university.harness.io/path/srm-practitioner/srm-comprehensive-quiz)\\n\\n# Chaos Engineering \\nChaos engineering is the discipline of experimenting with a software system in production to build confidence in the system\'s capability to withstand turbulent and unexpected conditions.\\n\\nYou can go through the below docs and learn more about chaos engineering, we recommend you go through the quick-start guide provided in the documentation and try out your first chaos experimentation:\\n\\n- [Chaos Engineering Docs](https://university.harness.io/path/harness-chaos-engineering-practitioner)\\n\\nHarness has structured courses on Chaos Engineering and those who want to try chaos engineering should surely give the Harness Chaos Practitioner Exam:\\n\\n- [Harness Chaos Practitioner Exam](https://university.harness.io/path/harness-chaos-engineering-practitioner)\\n\\n# Security Testing Orchestration\\n\\nHarness Security Testing Orchestration (STO) enables DevOps and DevSecOps teams to left shift security testing. STO orchestrates scanning, intelligently deduplicating scanner output, prioritizing remediations, and enforcing governance into your Pipeline. \\n\\nSTO puts scanning directly into your Pipelines to ensure that vulnerabilities are caught and fixed before your products are ever released.\\n\\nYou can surely have a look in the below video about the introduction as well as a demo of STO:\\n\\n<iframe width=\\"640\\" height=\\"480\\" src=\\"https://www.youtube.com/embed/dIT8utE_fvU\\" frameborder=\\"0\\" allow=\\"autoplay; encrypted-media\\" allowfullscreen > </iframe>\\n\\nYou can go through the below docs and get through the basics of the product:\\n\\n- [Security Testing Orchestration docs](https://docs.harness.io/category/txlccquh5c-sto-category)\\n\\n# Software Delivery Foundations Certification\\nYou can also give Harness Software Delivery Foundations Certification, it will surely help you in getting much deeper knowledge about the\xa0product.\\n\\n- [Software Delivery Foundations Certification](https://university.harness.io/page/certifications)\\n\\n# Important links\\n\\n- [Harness Docs](https://docs.harness.io)\\n- [Harness Blogs](https://harness.io/blog/)\\n- [Harness University](http://university.harness.io)\\n\\n\ud83c\udf08Join the growing community on Slack, refer [Harness Community Communications Guide](https://github.com/harness-community/overview/blob/main/community_communication_guide.rst) to interact with the wider community users/contributors, or create topics in [community.harness.io](https://community.harness.io)\\n\\nWe at Harness are always there to help our community, feel free to slack us on our Community Slack channel (P.S don\'t forget to join the channel). You can also reach out to us at [discourse](https://community.harness.io)."},{"id":"harness-ci-onboarding","metadata":{"permalink":"/blog/harness-ci-onboarding","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-05-Harness-CI-Onboarding/harness-ci-onboarding.md","source":"@site/blog/2022-10-05-Harness-CI-Onboarding/harness-ci-onboarding.md","title":"Harness CI Onboarding - Beginners Guide","description":"Introduction","date":"2022-10-05T00:00:00.000Z","formattedDate":"October 5, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"harness-ci","permalink":"/blog/tags/harness-ci"},{"label":"beginners-guide","permalink":"/blog/tags/beginners-guide"},{"label":"getting-started","permalink":"/blog/tags/getting-started"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":9.985,"hasTruncateMarker":false,"authors":[{"name":"Dhrubajyoti Chakraborty","title":"Community Engineering Intern","url":"https://github.com/codewdhruv","imageURL":"https://media-exp1.licdn.com/dms/image/C5603AQFvCMGToV9LMQ/profile-displayphoto-shrink_800_800/0/1631719718974?e=1670457600&v=beta&t=vWbeVBiAvAYLTdxYcAnIqzuvveJ8IWleCDV0A5Fdbp0","key":"dhrubajyoti"}],"frontMatter":{"slug":"harness-ci-onboarding","title":"Harness CI Onboarding - Beginners Guide","authors":["dhrubajyoti"],"tags":["continuous-integration","harness-ci","beginners-guide","getting-started","cme"]},"prevItem":{"title":"Getting started with the Harness Platform","permalink":"/blog/harness-getting-started"},"nextItem":{"title":"Harness CI - Background Step","permalink":"/blog/harness-ci-background-step"}},"content":"## Introduction\\n\\nThis beginner guide aims to help learners learn about the basic components of Harness CI and develop an understanding of the DevOps ecosystem involved in the Software Development lifecycle. In this article we will learn about the basic features of Harness CIE and also get started by building the first basic sample pipeline.\\n\\nEngineering team is usually expected to deliver error-free code at high frequency. A fast and reliable CI/CD pipeline is a major part for implementation of that in a sustainable model over time. Harness Continuous Integration tool which is built with test intelligence, native secrets, fine-grained RBAC, and extensible governance  as one of the best solutions in the marketplace for automated pipelines. Automated pipelines remove user errors, provide feedback loops to developers and helps enable fast product iterations.\\n\\n**What is a pipeline?**\\n\\nA Pipeline is an end-to-end process that delivers a new version of your software. It can be considered to be a cyclical process that includes integration, delivery, operations, testing, deployment, real-time updates, and metrics monitoring.\\n\\nFor example: A pipeline can use the CI module of Harness to build, test & push code and then also a CD module to deploy the artifact to the production environment.\\n\\n### Prerequisites\\n\\n\\n- Github Account ([Check out the other source code managers here](https://docs.harness.io/article/kqik8km5eb-source-code-manager-settings#source-code-manager-settings))\\n- Docker Hub Account & Repository ([Other artifactory packages](https://docs.harness.io/article/66ykcm0sf0-build-and-push-to-gcr-step-settings))\\n- Installation of K8s Delegate for Harness Delegate\\n- About Harness CI\\n- Features in Harness CI\\n- Getting Started with your first pipeline\\n- Troubleshooting frequently encountered issues\\n- Conclusion: Developer Feedback on Harness CIE\\n- What\u2019s Next?\\n\\n### Environment\\n\\n- Ubuntu 20.04/22.04\\n\\n### Requirements\\n- Kubernetes cluster for Harness Delegate and build farm.\\n- You\'ll need a Kubernetes cluster for Harness to use for the Harness Delegate and as a build farm. Ensure you have a cluster that meets the following requirements:\\n- Number of pods: 3 (two pods for the Harness Delegate, the remaining pod for the build farm).\\n- Machine type: ```4vCPU```\\n- Memory: 16GB RAM. The build farm and Delegate requirements are low but the remaining memory is for Kubernetes, the Docker container, and other default services.\\n- Networking: Outbound ```HTTPS``` for the Harness connection, and to connect to Docker Hub. Allow TCP port 22 for SSH.\\n- Namespace: When you install the ```Harness Delegate```, it will create the ```harness-delegate``` namespace. You\'ll use the same namespace for the build farm.\\n\\nA **Kubernetes service account** with permission to create entities in the target namespace is required. The set of permissions should include ```list```, ```get```, ```create```, and ```delete``` permissions. In general, the cluster-admin permission or namespace admin permission is enough.\\nFor more information see [User-Facing Roles](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles) from Kubernetes.\\n\\nThis tutorial implements creation of a pipeline over a github repository thus you\u2019ll be required to create a github account & host a project over a repository. To create a new repository on github follow these steps:\\n\\n1. Move to the upper-right corner on the github webapp & use the  drop-down menu to select New repository option.\\n\\n![create-new-repository](./repo-create.png)\\n\\n2. Type the name of the repository. The repository name is unique & cannot be same as already hosted repo names.\\n\\n![repo-name](./create-repository-desc.png)\\n\\n3. Select the repository visibility & click on create repository.\\n\\n![repo-public](./create-repository-public-private.png)\\n\\n![create-repo](./repo-create.png)\\n\\n### Installing Docker Engine\\n\\nTo get started with Docker Engine make sure you meet the [prerequisites](https://docs.docker.com/engine/install/ubuntu/#prerequisites) then install Docker. Older versions of Docker were called ```docker```, ```docker.io```, or ```docker-engine```. If these are installed uninstall them with this command.\\n\\n```bash\\nsudo apt-get remove docker docker-engine docker.io containerd runc\\n```\\n\\n**[Check out this documentation to get your Docker Engine installed](https://docs.docker.com/engine/install/)**\\n\\n\\n### Installation of K8s Delegate for Harness Delegate\\n\\nHarness Delegate is the service that connects all the components of the pipeline i.e artifact, infrastructure, collaboration, verification and other providers with the Harness Manager. It performs all the operations in the deployment lifecycle. Here we\u2019ll install Kubernetes Delegate.\\n\\n1. Move to the Harness Platform, in the Manager section click on setup and select Delegates.\\n2. In the delegates tab, click on the install delegate option with preference to Kubernetes YAML as the download type.\\n3. Update the name and profile and download the K8s Delegate or copy the download link.\\n4. Navigate to the harness-delegate-kubernetes folder that you extracted in the terminal using the following command\\n\\n```bash\\ntar -zxvf harness-delegate-kubernetes.tar.gz\\n\\ncd harness-delegate-kubernetes\\n```\\n\\nWith this you will directly connect with your cluster from the terminal and thus can easily copy the YAML file over.\\n\\n5. To verify the connection of your created K8s Delegate with the Harness Platform use the following command\\n\\n```bash\\nwget -p https://app.harness.io/ -O /dev/null\\n```\\n\\n6. Now we\u2019ll install the harness delegate using the `harness-delegate.yaml` file using this command\\n\\n```bash\\nkubectl apply -f harness-delegate.yaml\\n```\\n\\n7. To verify that the delegate pod was created run the following command.\\n\\n```bash\\nkubectl get pods -n harness-delegate\\n```\\n\\nWith this now you\'re ready to connect Harness to your artifact servers, clusters, and so on.\\n\\n\\n### About Harness CI\\n\\nHarness CI is powered by Drone the most popular open source CI tool. It\u2019s built for speed and developer experience. Onboarding it is simple and this is what this guide is about.\\n\\nHarness alongside the open source counterpart Drone introduced new features to scale the developer onboarding experience and reduce the time involved in the process drastically as compared to the industry standards.\\n\\n**Harness CI\u2019s major features are the following:**\\n\\n1. Containerized Steps (Zero Dependencies)\\n2. Visual Pipeline Builder with YAML Config as Code\\n3. Git Operations, Secrets & Fine grained RBAC for security etc\\n4. Test Intelligence\\n5. Integrated Platform\\n\\n### Getting Started with your first pipeline\\n\\nPipelines are a group of one or more stages. They are responsible for managing and automating builds, testing, deployments, and other important build and release stages.\\n\\nTo create a new Pipeline in Harness CI follow the steps below:\\n\\n1. Move to the Harness Platform, click on projects. Create a new project incase you haven\u2019t already created one.\\n2. Move to the modules section and click on Continuous Integration & click on create a new pipeline.\\n3. Enter the name for the pipeline & click on start. It usually takes 2-4 min for the provisioning stage of the pipeline.\\n\\n<iframe\\n    width=\\"640\\"\\n    height=\\"480\\"\\n    src=\\"https://www.youtube.com/embed/251WU_OG0BI\\"\\n    frameborder=\\"0\\"\\n    allow=\\"autoplay; encrypted-media\\"\\n    allowfullscreen\\n>\\n</iframe>\\n\\n\\nThe backbone of the pipeline is the build stage. This is where the user specifies the pipeline configuration details as the codebase to build, the infrastructure, the build workflow and all other additional components. The next step involves establishing the connection of the pipeline with the external resource. We use a ```connector``` in Harness CIE to develop this pipeline connection. The ```connector``` is a configurable object that automatically establishes connection to an external resource. \\n\\nTo create the Build Stage follow the steps given below: \\n\\n1. Move to the newly created pipeline in the Pipeline Studio, add a stage & select build.\\n\\n2. Add a stage name & under the configure codebase select connect connector.\\n\\n3. Click on New Creator & give preference to Github Connector from all the available options for connector type. \\n\\nTo configure the connector successfully provide the following details i.e \\na. URL Type as a Repository\\nb. Connection Type as HTTP\\nc. GitHub Repository URL\\n\\nYou\u2019ll also have to verify the github username & PAT\u2019s to make use of the connector. These secrets are stored in the Harness Secret Manager. \\n\\n4. Once the connector has been configured with the necessary credentials select Enable API Access.\\n\\n5. The connectivity medium can be directly through Harness Platform or through an delegate service running in an external resource. \\n\\n6. In this guide we\u2019ll install the delegate into the K8s cluster. Select Connect Through An Harness Delegate from the available options.\\n\\n7. Install the new delegate with infrastructure type as Kubernetes.\\n\\n8. Configure the delegate information as Name, Size, Permissions etc & install the delegate using the workspace definition YAML file that can be installed directly to the build infrastructure.\\n\\n9. Download the YAML script and run it on the previously created cluster from the terminal.\\n\\n10. Login to the K8s cluster from the same terminal and click on connect option.\\n\\n11. Install the Harness Delegate using the ```harness-delegate.yaml``` file using the following command.\\n\\n\\n\\n```bash\\n$ kubectl apply -f harness-delegate.yaml\\n```\\n\\n12. Set up the Delegate with the necessary configuration from the Delegate Setup option.\\n\\n13. Once the delegate is setup successfully you\u2019ll see the connector & repo details in the About your stage component.\\n\\n14. Select on setup stage and the new stage will be added to the pipeline.\\n\\nThe next step is to set up & define the Build Farm Infrastructure under the pipeline configuration settings. To setup the BFI follow the steps below:\\n\\n1. Select the newly created K8s cluster & create a new connector. Specify details as Name, Details, Delegates Setup & Connection Test.\\n2. Once verified click on Finish to add the new connector to the K8s Cluster Field.\\n3. Verify the namespace carefully and move to the Execution component of the pipeline.\\n\\nNow we can build & run tests over & against the hosted code. Move to the Execution Tab of the pipeline & add the step to run the steps. Follow the following steps to setup the Execution workflow of the pipeline:\\n\\n1. Add a run step to the pipeline & configure it as follows: \\n    - Give the step an appropriate name\\n    - Click on add a new connector option under the container registry option.\\n    - Select the connector type as Docker Registry\\n\\n2. We\u2019ll now create a new connector to the DockerHub account. Specify the account credentials and configure the secrets.\\n\\n![docker-img](./ci-tut-04-docker-connector-02-details.png)\\n\\n3. Verify the connection test & once successful click on Finish. Now we can Configure Run Step pane, with the new Connector in the Container Registry setting. \\nConfigure the step as follows:\\n- Give an appropriate step name.\\n- The Container Registry should show the Docker Hub Connector you just created.\\n- Image: ```golang:1.15```\\n- Command:\\n\\n\\n```bash\\ngo get gotest.tools/gotestsum\\ngotestsum --format=standard-verbose --junitfile unit-tests.xml || true\\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo\\n```\\n\\nThe last line contains the go build command to compile the package, along with its dependencies. Once configured click on Apply changes & save the pipeline.\\n\\nNow we can add the step to build & push the created image into the DockerHub repository. A repository in DockerHub is required to receive the artifacts from the pipeline. Add a step and specify the DockerHub account credentials. \\n\\nConfigure the step as follows:\\n\\n- Select Name as the Step name you defined earlier.\\n- Select the Docker Hub Connector you set up previously.\\n- Paste the docker repository URL & specify the tags: ```<+pipeline.sequenceId>```\\n- After successfully configuring the step components select Apply Changes & save the pipeline.\\n\\nThe pipeline is now ready for execution & can be used for running tests. \\nYou can also add the Integration Tests to the pipeline. To execute the pipeline click on Run. Select Git Branch and the git branch name when prompted such as main and click on Run Pipeline\\n\\nYou can view the logs of each step by clicking on it or else can also switch to the console view for more tracking down the micro details.\\nThe entire pipeline is also available in YAML. You can directly make changes to the YAML file and save the changes and it will automatically be reflected in the pipeline when executed.\\n\\n### Conclusion - Developer Feedback on Harness CIE\\n\\nDevelopers spend a lot of time into coding & solving the engineering problems. With Harness CIE we can now easily cut down the operational & functional time cost drastically. The added advantage to the features of CIE is the User Interface of CIE which is sleek and easy \\n& solves major issues of longer build and testing time. Harness CIE automatically scales up the build, test and deploy cycles. \\n\\nThe product focuses on developers & is completely developer-centric built around what a developer seeks to be the one stop solution for CI/CD."},{"id":"harness-ci-background-step","metadata":{"permalink":"/blog/harness-ci-background-step","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-05-CI-BackgroundStep/all_about_background_step.md","source":"@site/blog/2022-10-05-CI-BackgroundStep/all_about_background_step.md","title":"Harness CI - Background Step","description":"Introduction","date":"2022-10-05T00:00:00.000Z","formattedDate":"October 5, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"integration-test","permalink":"/blog/tags/integration-test"}],"readingTime":2.85,"hasTruncateMarker":false,"authors":[{"name":"Krishika Singh","title":"Community Engineer @ Harness","url":"https://github.com/krishi0408","imageURL":"https://github.com/krishi0408.png","key":"krishikasingh"}],"frontMatter":{"slug":"harness-ci-background-step","title":"Harness CI - Background Step","authors":["krishikasingh"],"tags":["continuous-integration","integration-test"]},"prevItem":{"title":"Harness CI Onboarding - Beginners Guide","permalink":"/blog/harness-ci-onboarding"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"## Introduction\\n\\nBackground steps are useful for running services that need to run for the entire lifetime of a build. This can be used when user wants to run something in background throughout the stage execution or when you want to run an end to end test, redis service or mysql local service to run some operations  \\n\\n![Background Step Introduction](./background_step_introduction.png)\\n\\nBefore diving deep into background step further, let\u2019s talk about service dependencies, how it helped and what were the shortcomings that service dependencies had that we have to introduce the background step \\n\\n**Service Dependency** is a detached service that\'s accessible to all steps in a stage. Service dependencies support workflows such as\\n- **Integration testing:** You can set up a service and then run tests against this service.\\n- **Running Docker-in-Docker:** You can set up a dind service to process Docker commands in Run Steps.\\n\\nWell you can see how important it was to introduce service dependency in your pipeline but then why did we introduce the background step?\\n\\nWell service dependency did have some shortcomings which background step could solve easily for example:\\n\\n1. Suppose you want to run a cypress server which needs some custom commands to start, you won\u2019t be able to do that with a service dependency but with a background step as it accepts commands so with the help of that you can write a script and run any service.\\n\\n2. Suppose you want redis,postgres and node js server to run together,with the help of service dependency you will have to define it separately but with the background step you can easily do that by adding a docker compose file ( the docker file either needs to be downloaded or we can easily use the one present in the git repo) and then doing docker-compose up with the help of command functionality. \\n\\n![Background Step Pipeline](./background_step_pipeline.png)\\n\\nWe discussed about some of the shortcomings of service dependency that background step could solve, let\u2019s have a detailed look on three of the major differences between the two:\\n\\n\\n### Background step support commands\\n\\n![Background Step Settings](./background_step_settings.png)\\n\\nLet\u2019s say you are running some local server and you want to run some pre command or you want to fetch some file before running the server , there is an optional field called command in the background step. With the support of this optional functionality it acts as a run step now .\\n\\n### Background step can be added anywhere in the pipeline execution\\n\\nThe background step can be added anywhere during the pipeline execution, thus making it flexible for the user.\\n\\n### Background step supports Templatization\\n\\nThe background step supports templates that can be reused across Pipelines which enhance developer productivity,reduce onboarding time,and enforce standardization across the teams. \\nAlso ,the background step supports sequential approvals, that is when one step is completed then only you can move to the other step,whereas service dependency was running all the commands at the same time.\\n\\nTo know more about templates visit [Templates](https://docs.harness.io/article/6tl8zyxeol-template).\\n           \\n#### Some important points:\\n\\n- A Background step starts a service and then proceeds. For any later step that relies on the service,it is good practice to verify that the service is running before you send requests.\\n\\n- If the pipeline runs on a VM build infrastructure, you can run the background service directly on the VM rather than in a container.To do this, leave the Container Registry and Image fields blank."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-01-welcome/index.md","source":"@site/blog/2022-10-01-welcome/index.md","title":"Welcome","description":"Hey y\'all amazing users of Harness Community!","date":"2022-10-01T00:00:00.000Z","formattedDate":"October 1, 2022","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"blog","permalink":"/blog/tags/blog"},{"label":"newuser","permalink":"/blog/tags/newuser"},{"label":"ompragash","permalink":"/blog/tags/ompragash"}],"readingTime":0.705,"hasTruncateMarker":false,"authors":[{"name":"Ompragash Viswanathan","title":"Senior Software Engineer","url":"https://github.com/Ompragash","imageURL":"https://github.com/Ompragash.png","key":"ompragash"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["ompragash"],"tags":["community","blog","newuser","ompragash"]},"prevItem":{"title":"Harness CI - Background Step","permalink":"/blog/harness-ci-background-step"}},"content":"Hey y\'all amazing users of Harness Community!\\n\\nNow, it\'s easy to submit your blog/articles and it\'s just a PR away!\\n\\nSimply create a PR by adding Markdown files (or folders) to the `blog` directory in [harness-community.github.io](https://github.com/harness-community/harness-community.github.io) repository!\\n\\nA blog post folder can be convenient to co-locate blog post images abd can be displayed like below:\\n\\n![Harness Community](./harnesser.png)\\n\\nOh and the other cool thing is, you can directly embed Youtube videos to your blog post and users can watch it on the same page and of course on a new tab if they want to;)\\n\\n<iframe\\n    width=\\"640\\"\\n    height=\\"480\\"\\n    src=\\"https://www.youtube.com/embed/I4sbENt4IeM\\"\\n    frameborder=\\"0\\"\\n    allow=\\"autoplay; encrypted-media\\"\\n    allowfullscreen\\n>\\n</iframe>\\n\\nThe blog supports tags as well! so refer the list of available tags and add it to your blog post!\\n\\nStay tuned for more improvements as this site is still in development phase:)\\n\\nAny contributions are welcome!"}]}')}}]);