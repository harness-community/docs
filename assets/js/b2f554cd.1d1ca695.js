"use strict";(self.webpackChunkharness_community=self.webpackChunkharness_community||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"maven-testing-in-harness-ci","metadata":{"permalink":"/blog/maven-testing-in-harness-ci","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-11-11-maven-testing-in-harness/maven-testing-in-harness.md","source":"@site/blog/2022-11-11-maven-testing-in-harness/maven-testing-in-harness.md","title":"Using Harness CI for Maven Testing","description":"Introduction","date":"2022-11-11T00:00:00.000Z","formattedDate":"November 11, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"maven","permalink":"/blog/tags/maven"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":2.65,"hasTruncateMarker":false,"authors":[{"name":"Debabrata Panigrahi","title":"Software Engineer","url":"https://github.com/Debanitrkl","imageURL":"https://github.com/Debanitrkl.png","key":"debabrata"}],"frontMatter":{"slug":"maven-testing-in-harness-ci","title":"Using Harness CI for Maven Testing","authors":["debabrata"],"tags":["continuous-integration","harness","maven","cme"]},"nextItem":{"title":"Harness Cloud Cost Management - an active cloud cost solution","permalink":"/blog/ccm-active-cloud-cost-solution"}},"content":"### Introduction\\n\\nIn this tutorial, we will go through a step-by-step example, on how to use the Harness CI for Maven testing. \\n\\n#### Pre-Requisite:\\n[Docker Connector](https://docs.harness.io/article/u9bsd77g5a-docker-registry-connector-settings-reference#docker-connector-settings-reference) to fetch public Docker images of [maven chrome jdk8](https://hub.docker.com/r/rvancea/maven-chrome-jdk8)\\n\\nLet\u2019s now deepdive into the step-by-step tutorial, wherein we will now use the Harness SaaS platform to set-up the maven testing:\\n\\n#### Step-1:\\nStart with the **build module**, and give it a name test, make sure to keep the clone codebase slider \u201coff\u201d as it is not required in this example.\\n\\n#### Step-2:\\nNow let\u2019s move to the next part of the pipeline, which is to select the infrastructure and select **Harness Hosted Builds** under the same.\\n\\n#### Step-3:\\nMoving on to the execution step, let\u2019s add a **Run Step** and name it as \u201ctestrun\u201d and under the container registry add the already created Docker Connector, and under the image add the \u201crvancea/maven-chrome-jdk8\u201d. Now let\u2019s add a shell command to run `mvn clean compile -DsuiteXmlFile=Batch1 test`  and apply the changes. \\n\\n![testrun](./testrun.png)\\n\\n#### Step-4:\\nNow, let\u2019s add another **Run Step** similar to the above and name it as reports, just here contrary to the above step the command changes to `find . -name \\"*.xml\\"`.\\n\\n![filesgen](./filesgen.png)\\n\\n#### Step-5:\\nIt\u2019s time to add the failure strategy now as a **Run Step**, with the following command.\\n```shell\\nactualFailedTestsStatus=<+execution.steps.testrun.status>\\necho $actualFailedTestsStatus\\nif [ \\"$actualFailedTestsStatus\\" = \\"IGNORE_FAILED\\" ]\\nthen\\n echo \\"tests have failed\\"\\n exit 1\\nelse\\n echo \\"Failure reruns have passed\\"\\n exit 0\\nfi\\n```\\n![faliurestrat](./failurestrat.png)\\n\\n#### Step-6:\\nNow, since the pipeline is complete, let\u2019s save and run the same and the results looks like the following on the console logs.\\n\\n![result](./result.png)\\n\\n![reports](./reports.png)\\n\\nOnce the run is successful, the above list of files are generated and can be further stored and processed as the test reports. \\n\\nFor, further reference following is the pipeline yaml of the above mentioned example\\n\\n```yaml\\npipeline:\\n  name: yaml\\n  identifier: yaml\\n  projectIdentifier: HarnessDemo1\\n  orgIdentifier: default\\n  tags: {}\\n  stages:\\n    - stage:\\n        name: test\\n        identifier: test\\n        type: CI\\n        spec:\\n          cloneCodebase: true\\n          infrastructure:\\n            type: KubernetesHosted\\n            spec:\\n              identifier: k8s-hosted-infra\\n          execution:\\n            steps:\\n              - step:\\n                  type: Run\\n                  name: testrun\\n                  identifier: testrun\\n                  spec:\\n                    connectorRef: account.harnessImage\\n                    image: rvancea/maven-chrome-jdk8\\n                    shell: Sh\\n                    command: |+\\n                      mvn clean compile -DsuiteXmlFile=Batch1 test\\n\\n                    privileged: false\\n                    reports:\\n                      type: JUnit\\n                      spec:\\n                        paths:\\n                          - target/surefire-reports/junitreports/*.xml\\n                  failureStrategies:\\n                    - onFailure:\\n                        errors:\\n                          - AllErrors\\n                        action:\\n                          type: Ignore\\n              - step:\\n                  type: Run\\n                  name: reports\\n                  identifier: failstrat\\n                  spec:\\n                    connectorRef: account.harnessImage\\n                    image: rvancea/maven-chrome-jdk8\\n                    shell: Sh\\n                    command: find . -name \\"*.xml\\"\\n                  when:\\n                    stageStatus: All\\n                  failureStrategies: []\\n              - step:\\n                  type: Run\\n                  name: failstrategy\\n                  identifier: step3\\n                  spec:\\n                    connectorRef: account.harnessImage\\n                    image: rvancea/maven-chrome-jdk8\\n                    shell: Sh\\n                    command: |-\\n                      actualFailedTestsStatus=<+execution.steps.testrun.status>\\n                      echo $actualFailedTestsStatus\\n                      if [ \\"$actualFailedTestsStatus\\" = \\"IGNORE_FAILED\\" ]\\n                      then\\n                        echo \\"tests have failed\\"\\n                        exit 1\\n                      else \\n                        echo \\"Failure reruns have passed\\"\\n                        exit 0\\n                      fi \\n                  when:\\n                    stageStatus: All\\n                  failureStrategies: []\\n  properties:\\n    ci:\\n      codebase:\\n        connectorRef: harnessRud\\n        build: <+input> \\n```\\n#### What\u2019s Next?\\nThe above pipeline and use case was the requirement of one our community user and was built according to their requirements by the community engineering team so, feel free to ask questions at [community.harness.io](https://community.harness.io/c/harness/7) or  [join community slack](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) to chat with our engineers in product-specific channels like:\\n\\n- [#continuous-delivery](https://join.slack.com/share/enQtMzkwNjIzMDIxMDEwMy1mYjM2M2FlY2Y3ZWM5ZTRiMGM0MzI1ZTA2YzIxNDYzYjFiODVjZjZlZmE5ZTRmZmZlZjEzYWY1YzU4ODdmNmVj)  Get support regarding the CD Module of Harness.\\n- [#continuous-integration](https://join.slack.com/share/enQtMzkyMzI1ODcxNzAxMi05MTI2M2VlNmVhZDY4NTlkM2JiODgxNWQ5NzY4NGU4MjE0MDQ1MDhlZTM0ZjA1ZjAyNjc3N2E4YmY2ZTc2YWY0) Get support regarding the CI Module of Harness."},{"id":"ccm-active-cloud-cost-solution","metadata":{"permalink":"/blog/ccm-active-cloud-cost-solution","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-11-09-CCM-Active-solution/ccm-active-cloud-cost-solution.md","source":"@site/blog/2022-11-09-CCM-Active-solution/ccm-active-cloud-cost-solution.md","title":"Harness Cloud Cost Management - an active cloud cost solution","description":"Billions of dollars are impacted through clouds annually and with experience, organisations are able to observe the bigger picture where cloud costs outweigh the benefits. Harness Cloud Cost Management, an active cloud cost solution can save up to 75% of your cloud spend.","date":"2022-11-09T00:00:00.000Z","formattedDate":"November 9, 2022","tags":[{"label":"cloud-cost-management","permalink":"/blog/tags/cloud-cost-management"},{"label":"ccm","permalink":"/blog/tags/ccm"},{"label":"cloud-cost","permalink":"/blog/tags/cloud-cost"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":4.935,"hasTruncateMarker":false,"authors":[{"name":"Ritik Kapoor","title":"Community Engineer","url":"https://github.com/rkapoor10","imageURL":"https://github.com/rkapoor10.png","key":"ritikkapoor"}],"frontMatter":{"slug":"ccm-active-cloud-cost-solution","title":"Harness Cloud Cost Management - an active cloud cost solution","authors":["ritikkapoor"],"tags":["cloud-cost-management","ccm","cloud-cost","harness","cme"]},"prevItem":{"title":"Using Harness CI for Maven Testing","permalink":"/blog/maven-testing-in-harness-ci"},"nextItem":{"title":"Python Yaml Onboarding for beginners","permalink":"/blog/python-yaml-onboarding"}},"content":"Billions of dollars are impacted through clouds annually and with experience, organisations are able to observe the bigger picture where cloud costs outweigh the benefits. Harness Cloud Cost Management, an active cloud cost solution can save up to 75% of your cloud spend.\\n\\nIn this blog, we are going to discuss cloud cost solutions which can cut down manual overheads and automate cloud savings when you\u2019re busy writing code.\\n\\n# Getting Started\\n\\nNow, before we take our discussion to active cloud cost solutions with Harness CCM, let\u2019s get an overview of passive and active cloud cost solutions.\\n\\nHarness CCM allows an organisation to understand and manage its cloud cost through visibility and automation. On this basis, cloud cost management can be broadly categorised into the following - \\n\\n- **Passive Cloud Cost Management** - Cloud management through such techniques includes visibility into cloud cost and forecast based on usage history. This includes calculating total cost and providing deep root knowledge about one\u2019s cloud spending.\\n- **Active Cloud Cost Management** - An instance, where passive solution alerts about hiking costs, an active cloud cost solution is capable of making intelligent and automated decisions. This can help in scaling down resources and cutting down costs due to idle or over-provisioned resources.\\n\\nThe latter can be achieved through Harness Next Geneneration CCM. \\n\\n# Harness First Gen CCM\\n\\nHarness First Generation of CCM, provides visibility into your cloud resource at an hourly granularity. It\u2019s a \u201ctag-less\u201d solution i.e you don\u2019t need tagging to get relevant information at any level. It is designed to provide relevant insights into cloud cost which can assist in maintenance and analysis. It has features such as -\\n\\n- **Anomaly Detection** - any sudden change in cloud spending could be notified through slack or email\\n- **Forecasting** - Based on cloud usage history a prediction model tracks and forecast your cloud cost at required intervals.\\n- **Budgeting -** This feature allows you to set budgets at different levels of your organisation and provide you email alerts when spending exceeds the set amount\\n\\nHarness First Generation is capable of doing root cost analysis if tied up with Harness\'s continuous delivery service.\\n\\n# Harness Next Gen CCM\\n\\nHarness Next Gen, provides the visibility of First Gen and is capable of regulating cloud costs through intelligent automation. This makes Harness Next Gen an active cloud cost management solution. \\n\\nHarness Next Gen enables an organisation to maintain and regulate cloud cost through custom rules which allows scaling down of idle or over-provisioned resources. \\n\\n# Features of Harness Next Generation CCM\\n\\nHarness Next Gen CCM is an **active cloud cost solution** with all the features of first-gen and more. Let\u2019s take a look at the key features of Harness Next Gen CCM - \\n\\n### Inventory Management\\n\\n[Harness Inventory Management](https://docs.harness.io/article/xbekog2ith-view-aws-ec-2-inventory-cost-dashboard) is achieved through AWS EC2 Inventory Cost Dashboard. It provides granular insights into AWS EC2 instances. It can track various cloud cost indicators across different zones and time ranges. Through visuals, you can understand your cloud cost trends and make decisions based on data and analysis.\\n\\nYou can adjust sliders and groups on the dashboard to filter data as per requirement. For example, set up a date range and select multiple states from running, stopped, terminated etc. This makes the dashboard dynamic and curate graphs and charts as per your requirement.\\n\\n![inventory_ss.png](./assets/inventory_ss.png)\\n\\n### Auto Stopping Rules\\n\\n[Cloud AutoStopping](https://docs.harness.io/category/biypfy9p1i-create-auto-stopping-rules) solves the problems of idle cloud wastage and automates cost savings. These rules can now be setup for your non-production workloads. Auto Stopping shut down compute resources that are idle for a set duration. So, it automatically detects this idle time and shuts down on-demand resources. \\n\\nYou can also run non-production workloads on spot instances to save cost up to 90%. These spot instance are dynamically orchestrated for the same infrastructure. As a result, switch between spot instances are without any interruptions. Spot instances are terminated when not in use and are automatically started when there is traffic or usage requests.\\n\\n![auto-ss.png](./assets//autostopping_ss.png)\\n\\n### Perspectives and Budgets\\n\\n[Perspectives](https://docs.harness.io/category/e7k0qds7tw-ccm-perspectives)** are the best way to view\xa0the correlation of cost data across clouds, clusters, and labels. Perspectives organise multiple resources allocated to a team through multiple cloud providers in one place. Suppose a QA team has access to GCP, and Azure for running tests and quality checks. A QA Perspective would bundle up these resources in a single place where they could be analysed, maintained and regulated together. So, instead of managing cloud costs based on providers, perspectives enable tracking at a team level.\\n\\n![ss_perspectives.png](./assets/ss_perspectives.png)\\n\\n[Budgets](https://docs.harness.io/category/lpq8glhiyc-ccm-budgets)** are used to assist perspectives through control checks/limits attached to a team\u2019s allocated cloud resource. Alerts could be sent when the cost exceeds (or is forecasted to exceed) the set budget.\\n\\nAll budgets created in Harness First Generation CMM will be available automatically in Next Generation CCM.\\n\\n![ss_budgets.png](./assets/ss_budgets.png)\\n\\n### Enhanced Business Intelligence Dashboards\\n\\n[Harness Dashboards](https://harness.io/blog/harness-dashboards) helps in measuring software delivery performance. These BI Dashboards are powered by Looker. You may use a built-in dashboard or create a custom dashboard as per requirement. These dashboards are available for data across all the modules. Harness gives you the ability to create your own dashboard to access the key metrics that drives software delivery outcomes.\\n\\nThese Dashboards comes with robust reporting ability, you can set alerts based on preset metrics and schedule reports.\\n\\nAt Harness, we have been working on\xa0dashboards that allow you to identify bottlenecks, inform operations, and help drive business decisions. The information and actual metrics may vary based on how engineering teams develop their product.\\n\\n![dashboard ss.jpeg](./assets/bi-dashboard-ss.png)\\n\\n# Conclusion\\n\\nThis blog explained how [Harness CCM](https://docs.harness.io/article/rr85306lq8-continuous-efficiency-overview) is an active cloud cost solution, and how it\u2019s at sentry duty with rising cloud cost. To know more about your cloud spending and set up your own cloud cost petrol unit, visit [harness.io](https://harness.io/products/cloud-cost).\\n\\nIn case you are stuck somewhere, need some assistance, or want to talk about cloud cost in general, join #cloud-cost-management channel in [Harness Community Slack](https://join.slack.com/t/harnesscommunity/shared_invite/zt-1jdk336xf-uTvxK5Dg6fElGKTsPv3SUw)."},{"id":"python-yaml-onboarding","metadata":{"permalink":"/blog/python-yaml-onboarding","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-11-09-YAML_ONBOARDING-PYTHON/yaml_onboarding_python.md","source":"@site/blog/2022-11-09-YAML_ONBOARDING-PYTHON/yaml_onboarding_python.md","title":"Python Yaml Onboarding for beginners","description":"In this blog ,we are going to talk about how easily you can set up your pipeline using YAML.","date":"2022-11-09T00:00:00.000Z","formattedDate":"November 9, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"yaml","permalink":"/blog/tags/yaml"},{"label":"python","permalink":"/blog/tags/python"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":5.725,"hasTruncateMarker":false,"authors":[{"name":"Krishika Singh","title":"Community Engineer @ Harness","url":"https://github.com/krishi0408","imageURL":"https://github.com/krishi0408.png","key":"krishikasingh"}],"frontMatter":{"slug":"python-yaml-onboarding","title":"Python Yaml Onboarding for beginners","authors":["krishikasingh"],"tags":["continuous-integration","yaml","python","cme"]},"prevItem":{"title":"Harness Cloud Cost Management - an active cloud cost solution","permalink":"/blog/ccm-active-cloud-cost-solution"},"nextItem":{"title":"Guide for common issues and recommended solutions for CD module - Part I","permalink":"/blog/troubleshooting-guide-for-harness-cd-part-1"}},"content":"In this blog ,we are going to talk about how easily you can set up your pipeline using YAML.\\n\\nHarness includes visual and YAML editors for creating and editing Pipelines, Triggers, Connectors, and other entities. Everything you can do in the visual editor you can also do in YAML.\\n\\nFor detailed information about using Harness YAML visit [Harness YAML Reference](https://docs.harness.io/article/xs2dfgq7s2-yaml-reference-cd-pipeline) and [Harness YAML Quickstart](https://docs.harness.io/article/1eishcolt3-harness-yaml-quickstart).\\n\\n## Before we begin\\n\\nMake sure you have the following set up before you begin this tutorial:\\n\\n- GitHub Account: This tutorial clones a codebase from a Github repo. You will need a GitHub account so Harness can connect to GitHub.\\n- Docker Hub account and repo: You will need to push and pull the image you build to Docker Hub. You can use any repo you want, or create a new one for this tutorial.\\n\\n## Getting Started\\n\\n- Fork the repository\\n\\n  For this demo, we are using [Python-pipeline-samples](https://github.com/harness-community/python-pipeline-samples).\\n\\n- Login into Harness UI\\n\\n  - Go to [Harness](https://app.harness.io).\\n    ![](./signup.png)\\n  - Sign up for the Harness platform.\\n  - Once you signup you will enter the Harness UI as shown below.\\n    ![](./signu1.png)\\n  - Go to `Builds` and select `Create a Project`.\\n    - Give the name of the Project -> `Save and Continue\\n    - You can also invite collaborators, it\'s optional.\\n      ![](./proj.png)\\n  - After `Save and Continue` select the module as `Continous Integration.\\n\\n    After selecting the module as Continous Integration you will see the screen as shown in the below screenshot.\\n    ![](./builds1.png)\\n\\n  - Select `Create a Pipeline`.\\n    - Name your `Pipeline`.\\n    - Choose the setup as `Inline`.\\n    - Select `Start`.\\n      Refer to the below screenshot:\\n      ![](./pi1.png)\\n\\n## Getting Started\\n\\n- After the Creation of the Pipeline, you will enter the pipeline studio as shown below\\n  ![](./pi2.png)\\n- As you can see in the pipeline studio we have two options, one is `VISUAL` and the other is `YAML`.\\n  Navigate to the YAML editor, as shown below.\\n  ![](./yaml.png)\\n- Copy and Paste the below YAML file into the editor.\\n\\nNote:- Paste the below YAML file just below the `tags{}`.\\n\\n```\\n  properties:\\n    ci:\\n      codebase:\\n        connectorRef: <+input>\\n        build: <+input>\\n        depth: <+input>\\n        prCloneStrategy: <+input>\\n  stages:\\n    - stage:\\n        name: build test and run\\n        identifier: build_test_and_run\\n        type: CI\\n        spec:\\n          cloneCodebase: true\\n          infrastructure:\\n             type: KubernetesHosted\\n             spec:\\n               identifier: k8s-hosted-infra\\n          execution:\\n            steps:\\n              - step:\\n                  type: Run\\n                  name: Code compile\\n                  identifier: Code_compile\\n                  spec:\\n                    connectorRef: <+input>\\n                    image: python:3.10.6-alpine\\n                    shell: Sh\\n                    command: python -m compileall ./\\n              - step:\\n                  type: Run\\n                  name: Create dockerfile\\n                  identifier: Create_dockerfile\\n                  spec:\\n                    connectorRef: <+input>\\n                    image: alpine\\n                    shell: Sh\\n                    command: |-\\n                      touch pythondockerfile\\n                      cat > pythondockerfile <<- EOM\\n                      FROM python:3.10.6-alpine\\n                      WORKDIR /python-pipeline-sample\\n                      ADD . /python-pipeline-sample\\n                      RUN pip install -r requirements.txt\\n                      CMD [\\"python3\\" , \\"./app.py\\"]\\n                      EOM\\n                      cat python-docker file\\n              - step:\\n                  type: BuildAndPushDockerRegistry\\n                  name: Build and Push an image to the docker registry\\n                  identifier: Build_and_Push_an_image_to_docker_registry\\n                  spec:\\n                    connectorRef: <+input>\\n                    repo: <+input>\\n                    tags:\\n                      - latest\\n                    dockerfile: pythondockerfile\\n                    optimize: true\\n        variables:\\n          - name: container\\n            type: String\\n            description: \\"\\"\\n            value: docker\\n    - stage:\\n        name: Integration test\\n        identifier: Integration_test\\n        type: CI\\n        spec:\\n          cloneCodebase: true\\n          infrastructure:\\n            useFromStage: build_test_and_run\\n          execution:\\n            steps:\\n              - step:\\n                  type: Background\\n                  name: \\"python server \\"\\n                  identifier: python_server\\n                  spec:\\n                    connectorRef: <+input>\\n                    image: <+input>\\n                    shell: Sh\\n                    command: python3 ./app.py\\n              - step:\\n                  type: Run\\n                  name: \\"test connection to server \\"\\n                  identifier: test_connection_to_server\\n                  spec:\\n                    connectorRef: <+input>\\n                    image: curlimages/curl:7.73.0\\n                    shell: Sh\\n                    command: |-\\n                      sleep 10\\n                      curl localhost:5000\\n\\n```\\n\\n- Click on `Save`.\\n\\n  Navigate to `VISUAL` and now you can see your two-stage pipeline ready as shown below in the screenshot. That\'s the beauty of YAML in Harness.\\n\\n  ![](./pipe-stud.png)\\n\\n  You can navigate through all the steps in the pipeline and explore the pipeline.\\n\\n## Inputs\\n\\nBefore running the pipeline, let\'s create a GitHub and Docker connector.\\n\\n- GitHub Connector\\n\\n  Under Project setup select `Connectors`.\\n\\n  Click on `+ New Connector`\\n\\n  Select `Code Repositories` and Choose `Github`.\\n\\n  You can refer to the below screenshot.\\n  ![](./conn.png)\\n\\n  Change the Connector settings as follows:\\n\\n  1.  Overview\\n\\n      Name: `python-sample-connector`\\n\\n      Select `Continue`.\\n\\n  2.  Details\\n\\n      URL Type: `Repository`\\n\\n      Connection Type: `HTTP`\\n\\n      GitHub Repository URL: Paste the link of your forked repository\\n\\n      Select `Continue`.\\n\\n  3.  Credentials\\n\\n      Username: (Your Github Username)\\n\\n      Personal Access Token: [Check out how to create personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)\\n\\n      Secret Name: `Git-Token`\\n\\n      Secret Value: PAT value generated in Github\\n\\n      Select `Enable API access (recommended)`\\n\\n      Under `API Authentication`-> `Personal Acess Token` select the name of the secret created in the previous step.\\n\\n      Select `Continue`.\\n\\n  4.  Select Connectivity Mode\\n\\n      Under `Connect to the provider`-> Select `Connect through Harness Platform.\\n\\n      Select `Save and Continue.\\n\\n  5.  Connection Test\\n\\n      You will see `Verification Successful` which means your connector is connected successfully to your codebase.\\n\\n      For reference, you can also check out this video on our Harness Community youtube channel\\n      <div className=\\"iframe-wrapper\\">\\n       <iframe src=\\"https://www.youtube.com/embed/0UHBK4vfzcI\\" frameborder=\\"0\\" allow=\\"autoplay; encrypted-media\\" allowfullscreen > </iframe>\\n       </div>\\n       To develop more understanding of Connectors [check out the docs here](https://docs.harness.io/category/o1zhrfo8n5-connectors)\\n\\n- Create a Docker Connector\\n\\n  Under Project setup select `Connectors`.\\n\\n  Click on `+ New Connector`\\n\\n  Select `Artifacts Repositories` and Choose `Docker Registry.\\n\\n  You can refer to the screenshot below\\n\\n  ![](./conn1.png)\\n\\n  Change the settings as follows\\n\\n  1.  Overview\\n      Name- `docker quickstart`\\n\\n  2.  Details\\n\\n      - Docker registry URL - `https://index.docker.io/v1/`\\n      - Provider type - `Docker Hub`\\n      - Authentication - `Username and Password\\n      - Username - Docker hub username\\n      - Secret Token - [Check out how to create docker PAT](https://github.com/harness-community/python-pipeline-samples/blob/main/docs/DockerPat.md)\\n\\n  3.  Select Connectivity Mode\\n\\n      Under `Connect to the provider`-> Select `Connect through Harness Platform.\\n\\n      Select `Save and Continue.\\n\\n  For your reference you can also check out this video on our Harness Community YouTube channel:\\n<div className=\\"iframe-wrapper\\">\\n     <iframe src=\\"https://www.youtube.com/embed/zJ--nKMCdZQ\\" frameborder=\\"0\\" allow=\\"autoplay; encrypted-media\\" allowfullscreen > </iframe>\\n</div>\\n- Create a Docker Repository\\n\\n  1. Log in to [Docker Hub](https://hub.docker.com)\\n  2. Go to `Repositories` -> Select `Create Repositories`.\\n  3. Give a name to your repository and you can choose whether you want you repo to be public or repo.\\n\\n## Run the Pipeline\\n\\nNavigate back to the `Pipeline studio` and click on `Run`.\\n\\nOn Clicking, you will see a page asking for inputs so as to run the pipeline, you can refer to the below screenshot\\n\\n![](./input.png)\\n\\n1. CI Codebase\\n\\n   - `Connector`- Select the `Github Connector` you created in the previous step.\\n\\n2. Stage: build test and run\\n\\n   Step: Code compile\\n\\n   - `Container Registry`- Select the `Docker Connector` you created in the previous step.\\n\\n   Step: Create dockerfile\\n\\n   - `Container Registry`- Select the `Docker Connector`.\\n\\n   Step: Build and Push an image to Docker Registry\\n\\n   - `Docker Connector`- Select the `Docker Connector`.\\n   - `Docker Repository`- `docker-hub-username/repository-name`\\n\\n3. Stage: Integration Test\\n\\n   Execution\\n\\n   Step: python server\\n\\n   - `Container registry`- Select the `Docker Connector`.\\n   - `Image`- `docker-hub-username/repository-name`\\n\\n   Step: test connection to the server\\n\\n   - `Container registry`- Select the `Docker Connector`.\\n\\nClick on `Run Pipeline`.\\n\\nIt will take around less than 3 mins to execute your Pipeline.\\n\\nAfter successful completion and execution of all the steps you will see something similar to this:\\n\\n![](./run.png)\\n\\nThis article explained YAML based onboarding process, if you want to try out Harness UI based onboarding do check out this tutorial:-\\n<div className=\\"iframe-wrapper\\">\\n<iframe src=\\"https://www.youtube.com/embed/r1GLYtOmJmM\\" frameborder=\\"0\\" allow=\\"autoplay; encrypted-media\\" allowfullscreen > </iframe>\\n</div>"},{"id":"troubleshooting-guide-for-harness-cd-part-1","metadata":{"permalink":"/blog/troubleshooting-guide-for-harness-cd-part-1","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-11-08-CD-guide-for-common-errors-and-issues-Part-1/Guide-for-common-issues-and-recommended-solutions-for-CD-module-Part-I.md","source":"@site/blog/2022-11-08-CD-guide-for-common-errors-and-issues-Part-1/Guide-for-common-issues-and-recommended-solutions-for-CD-module-Part-I.md","title":"Guide for common issues and recommended solutions for CD module - Part I","description":"INTRODUCTION","date":"2022-11-08T00:00:00.000Z","formattedDate":"November 8, 2022","tags":[{"label":"continuous-delivery","permalink":"/blog/tags/continuous-delivery"},{"label":"environment","permalink":"/blog/tags/environment"},{"label":"delegate","permalink":"/blog/tags/delegate"},{"label":"harness-cd","permalink":"/blog/tags/harness-cd"},{"label":"troubleshooting-guide","permalink":"/blog/tags/troubleshooting-guide"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":10.765,"hasTruncateMarker":false,"authors":[{"Name":"Shruthi G Kini","Title":"Community Engineer @ Harness","URL":"https://github.com/ShruthiHubb","imageURL":"https://github.com/Shruthigkini.png","key":"Shruthi Kini"}],"frontMatter":{"slug":"troubleshooting-guide-for-harness-cd-part-1","title":"Guide for common issues and recommended solutions for CD module - Part I","authors":["Shruthi Kini"],"tags":["continuous-delivery","environment","delegate","harness-cd","troubleshooting-guide","cme"]},"prevItem":{"title":"Python Yaml Onboarding for beginners","permalink":"/blog/python-yaml-onboarding"},"nextItem":{"title":"Provision AWS Infrastructure for Delegates","permalink":"/blog/aws-infra-for-delegates"}},"content":"### INTRODUCTION\\n\\nThis guide helps you to deal with common issues and recommended solutions right from the pipeline creation to its execution. You will find them categorized into different sections. We will bring in more troubleshooting tips in our upcoming guide series.\\n\\n### SERVICE\\n\\n**Issue:**\\n\\nCan we use the same service name for dev, QA, and prod so that when I choose the same service, it will automatically take the same infra and execution mode, or do we need to mention all those in the cd deploy stage?\\n\\n**Solution:**\\n\\nWe can use the same service to deploy in all environments, provided your infrastructure is templated/ parametrized and saved as input sets. While deploying the service, you can provide it as [runtime input](https://ngdocs.harness.io/article/t57uzu1i41-propagate-and-override-cd-services). \\n\\n\\n### CONNECTORS\\n\\n**Issue:**\\n\\nWhen a user is unable to create a git connector, not sure what URL to pick don\u2019t know where to pick(not sure what URL has to be added under \'GitHub Repository URL\').\\n![github-connector](./Github.png)\\n\\n**Solution:**\\n\\nPattern URL looks like this: ``` https://github.com/<account>/<repo> ```\\n\\n\\n**Issue:**\\n\\nWhat happens if a user selects a Kubernetes cluster that has an INACTIVE delegate?\\n![k8-cluster-connector](./k8-connector.png)\\n\\n**Solution:**\\n\\n![delegate-setup](./Delegate-setup.png)\\nAs per the screenshot above, make sure you verify the delegate if it is **CONNECTED** and you select the one that is active with **\u2018heartbeat\u2019**.\\n\\n**Issue:**\\n\\n![remote-branch](./remote-branch.png)\\n\\n**Solution:**\\n\\nCheck the git connector. Make sure the branch mentioned is available on the remote system.\\n\\n**Issue:**\\n\\nHi, I provisioned a Helm Connector as the Connector Artifact Server. I would like to get the details of the connector via Harness SDK. I am aware of the [GitHub repo](https://github.com/harness/harness-go-sdk), however, I cannot find the exact function I need to use, etc. Kindly help.\\n\\n**Solution:**\\n\\nIf you want to get Harness configurations or automate the creation of resources you can use the [REST APIs](https://harness.io/docs/api/tag/Connectors).\\n \\n**Issue:**\\n\\nExample for a connector in Harness SDK\\n\\n**Solution:**\\n\\nCurrently, the SDK doesn\'t have native support for connector resources but it can still be fetched using the config-as-code APIs. If you know the path to the connector you can do something like [this](https://github.com/harness/harness-go-sdk/blob/main/harness/cd/cac_test.go#L80).  If you already have a connector created you can find the path by going to Setup -> Config As Code (located in the top right-hand corner). From here you\'ll be able to see the path to where the connector\'s YAML configuration. For example, the path would be something like: Setup/Artifact Servers/Harness Docker Hub.yaml. I have attached a screenshot of it to look at.\\n\\nUsing the method I linked to, you\'ll be able to get back this YAML. There\'s not yet a native object in the SDK that you can easily parse this into, but you can create one yourself and deserialize it. Let me know if that helps in any way. (Screenshot attached for reference)\\n![Harness-sdk](./Harness-sdk.png)\\n\\n### MANIFEST FILES\\n\\n**Issue:**\\n\\nWhat happens if a user is trying to make a deployment using helm chart inputs wrong chart version? \\n![manifest-error](./manifest.png)\\n\\n**Solution:**\\n\\nCheck the chart version while adding them to the manifest step in the pipeline stage.\\n![manifest-solution](./manifest-step.png)\\n \\n### ARTIFACTS\\n\\n**Issue:**\\n\\nWhen I try to run the pipeline, if I select the \u201ctags\u201d dropdown to add a tag to the execution, I get the following error:\\n``` Stage Deploy_Dev: Please make sure that your delegates are connected. Refer [docs](https://ngdocs.harness.io/article/re8kk0ex4k) for more information on delegate Installation. ```\\n\\n**Solution:**\\n\\nIf you are using docker to pick your artifacts, then make sure you are defining the right path. Right URL: ``` https://registry.hub.docker.com/ ```. You can define tags by providing inputs at runtime or define them in your YAML file ex: tag: \u201clatest\u201d.\\n\\n### ENVIRONMENT\\n\\n**Issue:**\\n\\nMultiple options are available for the user to set the SERVICE\\n\\n1. If the user wants to set a fixed value:\\n\\n**Solution:**\\n\\n![edit-service](./env-1.png)\\n\\n2. If the user wants to pass it at runtime:\\n\\n**Solution:**\\n\\n![pass-runtime](./env-solution.png)\\n\\n### DEPLOYMENT STRATEGY\\n\\n**Issue:**\\n\\nWhat if the user selects a step irrelevant to the deployment strategy?\\n![deployment-strategy](./deployment-strategy.png)\\n\\n**Solution:**\\n\\nMake sure you select this step based on the deployment strategy selected. Say if you select a canary deployment, you have a canary delete step to delete the workloads and for other deployments, we have a delete step for cleaning.\\n\\n### Possible errors at the time of deployment\\n\\n**Issue:**\\n\\nWhat happens if the user inputs an invalid timeout for a step in a pipeline stage?\\n\\n**Solution:**\\n\\nFollow the tooltip\\n![tooltip](./invalid-timeout.png)\\n\\n**Issue:**\\n\\nWhen you enable editing mode and then try to navigate from YAML \\n![edit-mode](./edit-yaml.png)\\n\\n**Solution:**\\n\\nMake sure you complete all the steps in the stage. Incomplete Yaml will not be allowed to navigate or move further. \\n\\n### DELEGATE\\n\\n**Issue:**\\n\\nDoes the Harness delegate running in Kubernetes support node architecture using ARM64?\\n\\n**Solution:**\\n\\n1. We are not providing the binaries for the client tools in arm64, you would need to build your custom docker image to already have the arm64 binaries in client tools, under the same path we expect. Then we would see they are already there and not overwrite them.\\n2. To use arm64 would need to reverse engineer our docker image: create your own docker image that installs an arm64 JRE to run the Harness delegate jar and then pre-populate the client-tools directory with arm64 versions of the expected binary.s\\nThe following binary list can be used:\\n\\n```\\nkubectl/v1.13.2/kubectl\\ngo-template/v0.4/go-template\\nharness-pywinrm/v0.4-dev/harness-pywinrm\\nhelm/v2.13.1/helm\\nhelm/v3.1.2/helm\\nhelm/v3.8.0/helm\\nchartmuseum/v0.12.0/chartmuseum\\nchartmuseum/v0.8.2/chartmuseum\\ntf-config-inspect/v1.0/terraform-config-inspect\\ntf-config-inspect/v1.1/terraform-config-inspect\\noc/v4.2.16/oc\\nkustomize/v3.5.4/kustomize\\nkustomize/v4.0.0/kustomizen\\nscm/36d92fd8/scm\\n```\\n\\n**Note: We will be launching arm64 in couple of weeks**\\n\\n**Issue:**\\n\\nThe user wants to provision target infrastructure using terraform on Azure and deploy a sample app in it. The build pipeline executes but the deploy stage fails. \\n![delegate-capability-issue](./infrastructure.png)\\n\\n**Solution:**\\n\\n1. Check if the delegate is ACTIVE and has enough resources assigned to the pod. You can check the pods state with the commands like:\\n\\n```\\nkubectl get pods -n <<namespace>>\\nkubectl describe pods -n <<namespace>> \\n```\\n\\n2. For delegate capability issues, it depends on the specific user\u2019s use case. Ex: if you want to do a terraform deployment, a few versions of terraform demand, terraform to be installed on the delegate pod. If you want to do a helm deployment using Helm V2, you will need to install Helm v2 and Tiller on the delegate pod.\\t\\n\\n3. Please review our docs on [supported integrations](https://docs.harness.io/article/1e536z41av-supported-platforms-and-technologies#sort=relevancy&f:@commonsource=[NextGen%20Docs). \\n\\n### TEMPLATE\\n\\n**Issue:**\\n\\nIs there a way to do the equivalent of the helm template command to render the templates and display the output in the Harness?\\n\\n**Solution:**\\n\\nWe run a Helm Template when we do a Helm Chart Manifest type with a Kubernetes Deployment Type, we don\u2019t output that to a variable for a user to view, it can only be viewed in our execution logs. We don\u2019t do this either for a Native Helm Deployment where we run a Helm Template and then perform the Helm install or helm upgrade and the output is only visible in the execution log.\\n\\n![helm-chart](./chart-manifest.png)\\n\\nWe have seen our users fetch the chart in a shell script step and run the helm commands on the chart to see the output before Harness does a deployment.\\n\\n**Issue:**\\n\\nI am using Harness to spin a short-lived Kubernetes job. Is there any way to fetch the logs back to the Harness?\\n\\n**Solution:**\\n\\nYou can write a [shell script to fetch](https://docs.harness.io/article/k5lu0u6i1i-using-shell-scripts) logs for you as an output and then you can export/download them as deployment logs. \\n\\n**Issue:**\\n\\nI was referring to this [guide](https://docs.harness.io/article/knunou9j30-kubernetes-cd-quickstart) in Harness docs to learn about continuous delivery. On running the pipeline this error showed up. Does anyone know why this came and how to resolve it?\\n![API-calls](./API-call.png)\\n\\n**Solution:**\\n\\nHarness uses its own ConfigMap for every deployment to store the release history in a Kubernetes cluster. This ConfigMap can be used for Rollback if the deployment fails.\\nLet\u2019s say you are at your very first deployment(ConfigMap is yet to be created by Harness), now you want to make an API call to check if ConfigMap exists and say you get this error.\\n\\n```\\nInvalid request: Failed to get ConfigMap. Code: 403, message:{\\"kind\\":\\"Status\\",\\"apiVersion\\":\\"v1\\",\\"metadata\\":{},\\"status\\":\\"Failure\\",\\"message\\":\\"configmaps \\\\\\"release-abcdef\\\\\\" is forbidden: User \\\\\\"system:serviceaccount:sa:harness\\\\\\" cannot get resource \\\\\\"configmaps\\\\\\" in API group \\\\\\"\\\\\\" in the namespace \\\\\\"ns\\\\\\"\\",\\"reason\\":\\"Forbidden\\",\\"details\\":{\\"name\\":\\"release-abcdef\\",\\"kind\\":\\"configmaps\\"},\\"code\\":403} \\n```\\n\\nIt is clear from the above screenshot that API calls are failing due to permission. Check the permissions and try again and this [doc](https://docs.harness.io/article/ttn8acijrz-versioning-and-annotations#releases_and_versioning) should help.\\n\\n**Issue:**\\n\\nHi, I am creating a custom service command in Harness that simply deploys a zip file to my host. I realized that if for some reason my artifact does not get deployed correctly and the zip file does not exist on my host, an error will NOT get thrown when the unzip command fails. I tried forcing Harness to throw an error by writing to stderr using.\\n\\n```\\nif [-f \\"$ARTIFACT_FILE_NAME\\" ]; then\\n   unzip \\"$ARTIFACT_FILE_NAME\\"\\nelse\\n   1>&2 echo \\"Error: cannot find artifact\\"\\n```   \\n\\nBut Harness still treats this as an INFO message in the logs and does not fail the deployment. Any suggestions for how to fail a deployment through my bash script?\\n\\n**Solution:**\\nYou can refer to this [doc](https://docs.harness.io/article/1fjrjbau7x-capture-shell-script-step-output#stopping_scripts_after_failures), make sure you set -e works as syntactically the \'[-f\' part of the script is going to cause a failure.\\n\\n**Issue:**\\nHow to pull zip files from artifacts in the cd stage?\\n\\n**Solution:**\\nWe don\u2019t support that yet in Next Generation. We only support containerized Kubernetes deployments and native helm deployments in the platform. Please review our docs on supported integrations: Please review our docs on supported integrations. \\n\\n### SECRETS\\n\\n**SSH KEY**\\n\\n**Issue:**\\n\\nError while configuring the Linux server with ssh in Harness.\\n![ssh-server](./ssh.png) \\n\\n**Solution:**\\n\\n1. The connection issue likely has something to do with the URL. For an AWS Linux box, it\u2019s usually something like ec2-76-939-110-125.us-west-1.compute.amazonaws.com. For Azure, normally it would be something like **ssh -i ~/.ssh/id_rsa azureuser@10.111.12.123** so in Harness try it without the https:// scheme.:\\n2. The SSH key in your screenshot looks like it\u2019s in NextGen. You can also use a Shell Script step in [NextGen](https://ngdocs.harness.io/article/k5lu0u6i1i-using-shell-scripts). \\n3. In Harness CurrentGen you can deploy to any Linux VM using our [SSH Deployment Type](https://docs.harness.io/article/5qh02lv090-define-your-traditional-ssh-target-infrastructure), you can also use [Azure VMSS](https://docs.harness.io/category/4o8zim2tfr-vmss-howtos).\\n4. You can deploy to a [physical server](https://docs.harness.io/article/stkxmb643f-add-physical-data-center-cloud-provider). \\n5. If you\u2019re just looking to copy files as part of a \'workflow\', you can use a [Shell Script step](https://docs.harness.io/article/1fjrjbau7x-capture-shell-script-step-output).\\n6. For artifact copy, as opposed to deployment, you can use the SSH Service and Copy Artifact Command. \\n\\n### COMMON ISSUES\\n\\n**Issue:**\\n\\nHi, need some help with the following questions:\\n1. In Harness cd while deploying helm chart [from an HTTP helm chart], can I upload custom values.yaml file which is at a different location?\\n2. Installed a helm chart on an aks cluster using a Harness but tried to run the helm list locally in my terminal unable to see the release name in the cmd output?\\n3. In Harness CD, can I give a custom release name while installing the helm chart in the pipeline?\\n\\n**Solution:**\\n\\nTo answer your question:\\n1. You can do that, refer to the section values.yaml\\n2. By default the app is installed under the Harness namespace so you need to add -n harness to the Helm command. Try:\\n\\n```\\nhelm list -n harness\\n```\\n\\n3. Yes, we can do that\\n![custom-release-name](./custom-release-name.png)\\n\\n**Issue:**\\n\\nCan Harness CD deploy a helm chart and support kustomize patch on top of the helm chart? Are helm charts deployed by Harness visible using the helm CLI on the targets?\\n\\n**Solution:**\\n\\n1. We can fetch Helm charts for Kustomize Deployments. We can also apply Patches to those kustomize deployments. Harness Agent has its own Helm Client, we use that Helm client to query the deployed resources associated with the chart. With Kustomize and Helm charts, Harness wouldn\u2019t deploy using Helm, we would deploy using the kustomize cli and we can apply patches. We would track the resources with the labels we apply to the Kubernetes objects we deploy.\\n2. You could run a helm list -To list all the helm charts, that\u2019s no problem. However, Harness will manage the state and take care of rollback for you vs the helm client and tiller. We already know what the previous resources are so in event of deployment failure we can roll back to the last known healthy state. We have an Argo CD Integration where we allow you to leverage your existing ArgoCD cluster and manage it with Harness and Integrate it natively with Harness CI.\\n\\n**Harness can use ArgoCD for GitOps**\\n\\nHarness can manage and orchestrate the Deployments out of the box without having ArgoCD cluster management. We manage the deployed resources on the cluster, we have a slew of integrations with Kubernetes, Helm, Kustomize, and Openshift, We give you Canary, Blue-Green, and Rolling Deployment Logic out of the box.\\nWe integrate with ArgoCD if you want that style of deployment with GitOps.\\nQuick reference doc: \\n\\n1. [Harness Argocd GitOps quickstart](https://ngdocs.harness.io/article/ptlvh7c6z2-harness-argo-cd-git-ops-quickstart)\\n2. [Use kustomize for Kubernetes deployments](https://ngdocs.harness.io/article/98u2hvzj0t-use-kustomize-for-kubernetes-deployments)\\n\\n### Need further help?\\n\\nFeel free to ask questions at community.harness.io or  join community slack to chat with our engineers in product-specific channels like:\\n\\n[#continuous-integration](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) Get support regarding the CI Module of Harness.\\n\\n[#continuous-delivery](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) Get support regarding the CD Module of Harness."},{"id":"aws-infra-for-delegates","metadata":{"permalink":"/blog/aws-infra-for-delegates","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-11-03-aws-infra-for-delegate/aws-infra-for-delegate.md","source":"@site/blog/2022-11-03-aws-infra-for-delegate/aws-infra-for-delegate.md","title":"Provision AWS Infrastructure for Delegates","description":"This tutorial aims at enabling users to set up a Kubernetes cluster on AWS and will serve as the foundation for your CI/CD pipeline infrastructure. After the infrastructure is ready on a free account, you can proceed to create and install a Delegate.","date":"2022-11-03T00:00:00.000Z","formattedDate":"November 3, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"continuous-delivery","permalink":"/blog/tags/continuous-delivery"},{"label":"delegates","permalink":"/blog/tags/delegates"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":2.91,"hasTruncateMarker":false,"authors":[{"name":"Debabrata Panigrahi","title":"Software Engineer","url":"https://github.com/Debanitrkl","imageURL":"https://github.com/Debanitrkl.png","key":"debabrata"}],"frontMatter":{"slug":"aws-infra-for-delegates","title":"Provision AWS Infrastructure for Delegates","authors":["debabrata"],"tags":["continuous-integration","continuous-delivery","delegates","harness","cme"]},"prevItem":{"title":"Guide for common issues and recommended solutions for CD module - Part I","permalink":"/blog/troubleshooting-guide-for-harness-cd-part-1"},"nextItem":{"title":"Configure Run Step in Harness CI","permalink":"/blog/configure-run-step"}},"content":"This tutorial aims at enabling users to set up a Kubernetes cluster on AWS and will serve as the foundation for your CI/CD pipeline infrastructure. After the infrastructure is ready on a free account, you can proceed to create and install a Delegate. \\n\\n### Credits for AWS\\n\\nTo avail free credits in AWS please follow the following resources:\\n- [AWS Credits: How To Obtain Free Credits for Your Startup?](https://www.lastweekinaws.com/blog/how-to-get-free-aws-credits-4-tactics-to-use/)\\n- [How to Get Free AWS Credits: 4 Tactics to Use](https://www.argonaut.dev/blog/aws-free-credits)\\n\\nIf you are a student please sign in using [AWS Educate](https://aws.amazon.com/education/awseducate/)\\n\\n> **Note:**\\n>Under the AWS Free tier the EKS service is not available, so it\u2019s suggested to get some free credits and use them for EKS. \\n\\n### Pre-requisites:\\nThere are certain requirements in terms of [access and permissions](https://docs.harness.io/article/2132l9r4gt#permissions) and [memory resources](https://docs.harness.io/article/2132l9r4gt#compute_resources) for the delegate to function properly. \\n\\n### Creating a Cluster: \\nConsidering you are a first-time user, please consider the following specifications along with the above prerequisites, while creating a cluster:\\n- **Number of nodes:** minimum of 3.\\n- **Machine type:** 4vCPU\\n- **Memory:** 12GB RAM and 6GB Disk Space. 8GB RAM is for the Delegate. The remaining memory is for Kubernetes and containers.\\n- **Networking:** Outbound HTTPS for the Harness connection, and to connect to any container image repo. Allow TCP port 22 for SSH.\\n\\nFor creating a cluster follow the steps mentioned in the [documentation](https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html), also you can take the help of the demo in the video below. \\n\\n<div className=\\"iframe-wrapper\\">\\n<iframe\\n    src=\\"https://www.youtube.com/embed/p6xDCz00TxU\\"\\n    frameborder=\\"0\\"\\n    allow=\\"autoplay; encrypted-media\\"\\n    allowfullscreen\\n>\\n</iframe>\\n</div>\\n\\nYou will be able to see your cluster, after creation on the management console, like the picture below. \\n\\n![AWS Dashboard](./aws-dashboard.png)\\n\\n### Authenticate to the cluster:\\n1. Open a terminal and navigate to where the Delegate file is located.\\n2. You will connect to your cluster using the terminal so you can simply run the YAML file on the cluster.\\n\\n![AWS Access](./aws-access.png)\\n\\n3. In the same terminal, log into your Kubernetes cluster. In most platforms, you select the cluster, click Connect, and copy the access command.\\n\\n![AWS Configure](./aws-configure.png)\\n\\n4. Next, install the Harness Delegate using the harness-delegate.yaml file you just downloaded. In the terminal connected to your cluster, run this command:\\n    \\n    ```bash\\n    kubectl apply -f harness-delegate.yml\\n    ```\\n5. The successful output would look like this\\n\\n![delegate-install](./delegate-install.png)\\n\\n6. To validate run the following command and check.\\n\\n    ```bash\\n    # kubectl get namespaces\\n    NAME                  STATUS   AGE\\n    default               Active   29h\\n    harness-delegate-ng   Active   24m\\n    kube-node-lease       Active   29h\\n    kube-public           Active   29h\\n    kube-system           Active   29h\\n    ```\\n\\nAlso, you could check for pods under your AWS cluster to find the delegate\\n\\n![delegate pods](./delegate-pods.png)\\n\\n7. Now that your cluster is operational, you may add resources to it by using the kubectl utility, as you can see. Please use [Start Deploying in 5 Minutes with a Delegate-first Approach](https://www.harness.io/technical-blog/deploy-in-5-minutes-with-a-delegate-first-approach) tutorial to install Delegate at this time and move forward with creating your CI/CD pipeline.\\n\\n> **Warning:**\\n> You have to exit the present pipeline without saving to view delegate details/continue with further steps.\\n\\n\\n8. You could check about your delegates on the dashboard under Project Setup.\\n\\n![check-delegate](./check-delegate.png)\\n\\n9. The delegate details would look something similar to this\\n\\n![delegate-available](./delegate-available.png)\\n\\n> **Note:**\\n> Apart from the above mentioned way, there are other ways to install delegate on AWS, for eg using EC2. \\n\\n### Need further help? \\n\\nFeel free to ask questions at [community.harness.io](https://community.harness.io/c/harness/7) or  [join community slack](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) to chat with our engineers in product-specific channels like:\\n\\n[#continuous-delivery](https://join.slack.com/share/enQtMzkwNjIzMDIxMDEwMy1mYjM2M2FlY2Y3ZWM5ZTRiMGM0MzI1ZTA2YzIxNDYzYjFiODVjZjZlZmE5ZTRmZmZlZjEzYWY1YzU4ODdmNmVj)  Get support regarding the CD Module of Harness.\\n[#continuous-integration](https://join.slack.com/share/enQtMzkyMzI1ODcxNzAxMi05MTI2M2VlNmVhZDY4NTlkM2JiODgxNWQ5NzY4NGU4MjE0MDQ1MDhlZTM0ZjA1ZjAyNjc3N2E4YmY2ZTc2YWY0) Get support regarding the CI Module of Harness."},{"id":"configure-run-step","metadata":{"permalink":"/blog/configure-run-step","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-20-run-step/run-step.md","source":"@site/blog/2022-10-20-run-step/run-step.md","title":"Configure Run Step in Harness CI","description":"Introduction","date":"2022-10-20T00:00:00.000Z","formattedDate":"October 20, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"harness-ci","permalink":"/blog/tags/harness-ci"},{"label":"troubleshooting-guide","permalink":"/blog/tags/troubleshooting-guide"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":5.485,"hasTruncateMarker":false,"authors":[{"name":"Dhrubajyoti Chakraborty","title":"Community Engineering Intern","url":"https://github.com/codewdhruv","imageURL":"https://media-exp1.licdn.com/dms/image/C5603AQFvCMGToV9LMQ/profile-displayphoto-shrink_800_800/0/1631719718974?e=1670457600&v=beta&t=vWbeVBiAvAYLTdxYcAnIqzuvveJ8IWleCDV0A5Fdbp0","key":"dhrubajyoti"}],"frontMatter":{"slug":"configure-run-step","title":"Configure Run Step in Harness CI","authors":["dhrubajyoti"],"tags":["continuous-integration","harness-ci","troubleshooting-guide","cme"]},"prevItem":{"title":"Provision AWS Infrastructure for Delegates","permalink":"/blog/aws-infra-for-delegates"},"nextItem":{"title":"Provision Azure Infrastructure for Delegates","permalink":"/blog/azure-infra-for-delegates"}},"content":"## Introduction\\n\\nThis beginner guide aims to help learners learn the configuration management for run steps settings in Harness CI. We will learn about different settings and permissions for the Harness CI Run Tests step which executes one or more tests on a container image.\\n\\n### Before We Begin\\n\\nAre you confused with terminologies like Container Resources, Image Pull Policy etc while creating & configuring a run step for your CI pipeline? In this article we will discuss a few such terminologies on the Harness CI platform and how you can configure them to set up your run step in the pipeline settings according to your requirements.\\n\\n### Configuration Parameters in a Run Step\\n\\n- Name\\n- ID\\n- Description\\n- Container Registry\\n- Image\\n- Namespaces\\n- Build Tool\\n- Language\\n- Packages\\n- Run Only Selected Tests\\n- Test Annotations\\n- Pre-Command & Post-Command\\n- Report Paths & Environment Variables\\n- Output variables\\n- Image Pull Policy\\n- Container Resources\\n\\n### Name\\nThe unique name for the run step. Each run step must have a unique name & it is recommended to use a name which describes the step.\\n\\n### ID\\nMost of the Harness entities and resources include a unique Id also referred as entity Identifier that\'s not modifiable once the entity is created. It provides a constant way to refer to an entity and avoid issues that can arise when a name is changed.\\n\\nInitially Harness automatically generates an identifier for an entity which can be modified when you are creating the entity but not after the entity is saved.\\n\\nEven if you rename the entity the Identifier remains the same. The automatically generated Identifier is based on the entity name and follows the identifier naming conventions.\\nIf an entity name cannot be used because it\'s already occupied by another entity Harness automatically adds a prefix in the form of ```-1```, ```-2```, etc.\\n\\n**[Check out the documentation to know more about Entity Identifier Reference](https://ngdocs.harness.io/article/li0my8tcz3-entity-identifier-reference)**\\n \\n### Description\\nThis is generally a text string describing the run step and it\u2019s working.\\n\\n### Container Registry\\nContainer Registry refers to the Harness Connector for a container registry. This is the container registry for the image Harness will use run build commands on such as DockerHub.\\n\\n**[Check out the documentation to know more about Harness Container Image Registry](https://docs.harness.io/article/my8n93rxnw-connect-to-harness-container-image-registry-using-docker-connector)**\\n\\n### Image\\nImage is the name of the Docker image to use when running commands.For example: ```alpine-node```\\nThis image name should include the tag and will by default refer to the latest tag if not specified. You can use any docker image from any docker registry including docker images from private registries.\\n\\n**Different container registries has different name formats:**\\n\\n- Docker Registry: enter the name of the artifact you want to deploy, such as ```library/tomcat```. Wildcards are not supported.\\n- GCR: enter the name of the artifact you want to deploy. Images in repos need to reference a path starting with the project ID that the artifact is in, for example: ```us.gcr.io/playground-243019/quickstart-image:latest```.\\n- ECR: enter the name of the artifact you want to deploy. Images in repos need to reference a path, for example: ```40000005317.dkr.ecr.us-east-1.amazonaws.com/todolist:0.2```.\\n\\n### Namespaces (C#)\\nA comma-separated list of the Namespace prefixes that you want to test.\\n\\n### Build Tool\\nThis is where you select the build automation tool & the source code language to build, such as Java or C#.\\n\\n### Packages\\nThis are the list of source code package prefixes separated by a comma. For example: ```com.company.```, ```io.company.migrations```\\n\\n### Run Only Selected Tests\\nIf this option is unchecked, Test Intelligence is disabled and all tests will run.\\n\\n### Test Annotations\\nThis is where you enter the list of test annotations used in unit testing separated by commas. \\nAny method annotated with this will be treated as a test method. The defaults are: ```org.junit.Test```, ```org.junit.jupiter.api.Test```, ```org.testng.annotations.Test```\\n      \\n### Pre-Command & Post-Command\\nIn pre-command you enter the commands for setting up the environment before running the tests. For example, printenv prints all or part of the environment.\\n\\nIn post-command you enter the commands used for cleaning up the environment after running the tests. For example, sleep ```600``` suspends the process for 600 seconds.\\n       \\n### Report Paths\\nThis refers to the path to the file(s) that store results in the JUnit XML format. You can enter multiple paths. Glob is supported.\\n\\n### Environment Variables & Output Variables\\nEnvironment variables refers to the variables passed to the container as environment variables and used in the Commands.\\n\\nOutput variables expose Environment Variables for use by other steps/stages of the Pipeline. You can reference the output variable of a step using the step ID and the name of the variable in Output Variables.\\n\\n\\n![output-var](./output-var.png)\\n\\n\\n### Image Pull Policy\\nThis is where you make the choice to set the pull policy for the image.\\n\\n- **Always:** The kubelet queries the container image registry to resolve the name to an image digest every time the kubelet launches a container. If the kubelet encounters an exact digest cached locally, it uses its cached image; otherwise, the kubelet downloads (pulls) the image with the resolved digest, and uses that image to launch the container.\\n\\n- **If Not Present:** The image is pulled only if it isn\'t already present locally.\\n\\n- **Never:** The kubelet assumes that the image exists locally and doesn\'t try to pull the image.\\n\\n\\n### Container Resources\\n\\nThe container resources configuration specifies the maximum resources used by the container at runtime.\\n\\n**Limit Memory**\\nMaximum memory that the container can use. You can express memory as a plain integer or as a fixed-point number using the suffixes G or M. You can also use the power-of-two equivalents Gi and Mi.\\n\\n**Limit CPU**\\nThe maximum number of cores that the container can use. CPU limits are measured in cpu units. Fractional requests are allowed: you can specify one hundred millicpu as 0.1 or 100m. \\n\\n**[See Resource units in Kubernetes](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes)**\\n\\n\\n:::note\\n\\nThis is not applicable in case you have opted for Hosted by Harness in your Infrastructure settings of the step.\\n\\n:::\\n \\n### Timeout\\nThis specifies the timeframe until which the step shall execute. Once the timeout is reached the step fails and the Pipeline execution continues.\\n\\n\\n### NOT ABLE TO TROUBLESHOOT THE ENCOUNTERED ERROR\\n\\nIn case the user is unable to troubleshoot the application error or pipeline execution failures the user can log/submit a ticket to Harness Support. To log a ticket follow the process:\\n\\n1. Click the **Help** button in the Harness Manager\\n2. Click **Submit a Ticket** or **Send Screenshot**\\n3. Fill out the pop up form and click **Submit Ticket** or **Send Feedback**"},{"id":"azure-infra-for-delegates","metadata":{"permalink":"/blog/azure-infra-for-delegates","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-13-azure-infra-for-delegates/azure-infra-for-delegates.md","source":"@site/blog/2022-10-13-azure-infra-for-delegates/azure-infra-for-delegates.md","title":"Provision Azure Infrastructure for Delegates","description":"Creating a delegate requires the creation of an infrastructure in which computational tasks can take place. The infrastructure is typically a Kubernetes cluster.","date":"2022-10-13T00:00:00.000Z","formattedDate":"October 13, 2022","tags":[{"label":"delegates","permalink":"/blog/tags/delegates"},{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"continuous-delivery","permalink":"/blog/tags/continuous-delivery"},{"label":"connectors","permalink":"/blog/tags/connectors"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":3.62,"hasTruncateMarker":false,"authors":[{"name":"Hrittik Roy","title":"Community Engineer","url":"https://github.com/hrittikhere","imageURL":"https://github.com/hrittikhere.png","key":"hrittikhere"}],"frontMatter":{"slug":"azure-infra-for-delegates","title":"Provision Azure Infrastructure for Delegates","authors":["hrittikhere"],"tags":["delegates","continuous-integration","continuous-delivery","connectors","harness","cme"]},"prevItem":{"title":"Configure Run Step in Harness CI","permalink":"/blog/configure-run-step"},"nextItem":{"title":"Troubleshooting Guide: Harness CI","permalink":"/blog/troubleshooting-harness-ci"}},"content":"Creating a delegate requires the creation of an infrastructure in which computational tasks can take place. The infrastructure is typically a Kubernetes cluster.\\n\\nThis tutorial shows you how to set up a Kubernetes cluster on Azure and will serve as the foundation for your CI/CD pipeline infrastructure. After the infrastructure is ready on a free account, you can proceed to create and install a Delegate.\\n\\n\\n## Student Account\\n\\nIf you\u2019re a student, you\u2019re in luck as there is [Azure for Students](https://azure.microsoft.com/en-us/free/students/) where you can sign in with your educational email address to create an account without a credit card to get $100 worth of credits.\\n\\nThese credits can be used to deploy the Kubernetes Cluster and other services if required. \\n\\nTo, get started with the account creation go to Azure for Students.\\n\\nStep 1: Click on Activate Now\\n\\n\\n![Activate Free Account](./activate-free-account.png)\\n\\n\\nStep 2: After signing in with a Microsoft account, enter your educational email address:\\n\\n\\n\\n![Activate Azure for Students](./activate-azure-for-students.png)\\n\\n\\nStep 3: Sign in to Azure Portal!\\n\\n\\n## A free Azure Account\\n\\nFor anyone who can verify their identity with a phone number and a credit card, Azure offers a free account with $200 in Azure credit. Once your account has been verified, you can create a Kubernetes cluster in it.\\n\\nStep 1: Go to the [Azure Free Account Page](https://azure.microsoft.com/en-in/free/)\\n\\nStep 2: Click on Start free to start the account creation procedure \\n\\n\\n![Azure Free Account](./azure_free_account_cc.png)\\n\\n\\nStep 3: Fill in the following fields\\n\\n![Fill Details](./fill_cc_details.png)\\n\\n\\nStep 4: Once your details are in click on Sign Up after you have accepted the terms and conditions. \\n\\n\\n![Sign Up Credit Card](./sign_up_cc.png)\\n\\n\\nStep 5: Verify your phone number\\n\\nStep 6: Put in your CC details and depending upon your Region a small amount will be deducted and refunded for verification. \\n\\nStep 7: You can access your account using the [Azure Portal](https://portal.azure.com/)\\n\\n\\n## Azure Portal\\n\\nAzure portal is the web-based management console for Microsoft Azure. It provides a single, unified view of all your Azure resources, including compute, storage, networking, and security. You can use the Azure portal to deploy and manage your Azure resources and to monitor their health and usage. \\n\\n\\n![Azure Portal](./azure_portal.png)\\n\\n\\n\\nYou will use the portal to create your Kubernetes Cluster and connect to it.\\n\\n\\n## Create a Cluster\\n\\nThe steps to create a cluster will be to use the Azure Kubernetes Service which is the managed Kubernetes offering from Azure. The steps are as follows:\\n\\nStep 1: Click on Create a Resource after signing in\\n\\n\\n![Create a Resource](./create_a_resource.png)\\n\\n\\nStep 2: Search Container and then click on `Kubernetes Service`\\n\\n\\n![Find Kubernetes Service](./create_k8s_service.png)\\n\\nStep 3: Click on Create\\n\\n\\n![Create Kubernetes Service](./creation_k8s_service.png)\\n\\n\\nStep 4: On the Basics page, configure the following options for a Delegate to Run:\\n\\n\\n\\n* Project details:\\n    * Select an Azure Subscription.\\n    * Select or create an Azure Resource group, such as DelegateGroup.\\n* Cluster details:\\n    * Enter a Kubernetes cluster name, such as myEnviroment.\\n    * Select a Region for the AKS cluster\\n    * Select 99.5% for API server availability for lower cost\\n* Go to Scale Method and change it to Manual as your account might not have sufficient compute quota for autoscaling. Next change the Node Count to 2\\n![image](https://user-images.githubusercontent.com/67012359/199068562-b0f39b58-9723-4cd7-84d6-33ee534ede20.png)\\n\\n\\nStep 5: Start the resource validation by clicking Review + Create on your portal. Once validated, click Create to begin the process of cluster creation. Wait a few minutes for the cluster to deploy.\\n\\n\\n## Connect to your cluster\\n\\nNow, when your cluster is ready you can connect to the Azure Cloud Shel on your portal and open the terminal\\n\\n\\n\\n![Cloud Shell](./cloud_shell.png)\\n\\n\\nNavigate to your cluster and click on Connect!\\n\\n![Connect to Cluster](./connect_to_aks.png)\\n\\nFollow the steps displayed on the right panel and then you can connect to your cluster! \\n\\nRun `kubectl cluster-info` to display details on your cluster!\\n\\n\\n## Next Steps\\n\\nNow that your cluster is operational, you may add resources to it by using the kubectl utility, as you can see. Please use [Start Deploying in 5 Minutes with a Delegate-first Approach](https://www.harness.io/technical-blog/deploy-in-5-minutes-with-a-delegate-first-approach) tutorial to install Delegate at this time and move forward with creating your CI/CD pipeline.\\n\\n\\n## Need further help?\\n\\nFeel free to ask questions at [community.harness.io](https://community.harness.io/c/harness/7) or [ join community slack](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) to chat with our engineers in product-specific channels like:\\n\\n\\n\\n* [#continuous-delivery](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw)  Ask questions/help other users regarding CD Module of Harness.\\n* [#continuous-integration](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) Ask questions/help other users regarding CI Module of Harness."},{"id":"troubleshooting-harness-ci","metadata":{"permalink":"/blog/troubleshooting-harness-ci","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-11-Troubleshooting-CI-Errors/troubleshooting-ci-guide.md","source":"@site/blog/2022-10-11-Troubleshooting-CI-Errors/troubleshooting-ci-guide.md","title":"Troubleshooting Guide: Harness CI","description":"Introduction","date":"2022-10-11T00:00:00.000Z","formattedDate":"October 11, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"harness-ci","permalink":"/blog/tags/harness-ci"},{"label":"troubleshooting-guide","permalink":"/blog/tags/troubleshooting-guide"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":6.09,"hasTruncateMarker":false,"authors":[{"name":"Dhrubajyoti Chakraborty","title":"Community Engineering Intern","url":"https://github.com/codewdhruv","imageURL":"https://media-exp1.licdn.com/dms/image/C5603AQFvCMGToV9LMQ/profile-displayphoto-shrink_800_800/0/1631719718974?e=1670457600&v=beta&t=vWbeVBiAvAYLTdxYcAnIqzuvveJ8IWleCDV0A5Fdbp0","key":"dhrubajyoti"}],"frontMatter":{"slug":"troubleshooting-harness-ci","title":"Troubleshooting Guide: Harness CI","authors":["dhrubajyoti"],"tags":["continuous-integration","harness-ci","troubleshooting-guide","cme"]},"prevItem":{"title":"Provision Azure Infrastructure for Delegates","permalink":"/blog/azure-infra-for-delegates"},"nextItem":{"title":"Beginners Guide to Git Connectors","permalink":"/blog/git-connector"}},"content":"## Introduction\\n\\nThis is a guide to get started with the common use cases for the end users to implement pipeline executions successfully in Harness CI\\n\\nHarness provides various sources & tools to easily troubleshoot frequently encountered errors to fix pipeline failures. This guide lists some of the common issues faced while implementing and designing pipelines in Harness CI and the possible solutions.\\n\\n**What\u2019ll we be covering here?**\\n\\n- Syntax Verification\\n- Variable Verification\\n- Troubleshooting Delegate Installation Errors\\n- Troubleshooting Triggers Errors\\n- Troubleshooting Git Experience Errors\\n\\n\\n### Verify Syntax\\n\\nAn early-stage error use case is generally incorrect syntax. In such cases, the pipeline returns an invalid YAML syntax message and does not start running in case any syntax error is detected.\\n\\nEdit ```pipeline.yaml``` in the pipeline studio\\n\\nThe pipeline editor in the YAML view is recommended for editing experience (rather than the graphical stage view). Major features in the editor include:\\n- Creation of connectors, secrets & pipelines from scratch\\n- Realtime schema validation\\n- Intellisense & auto-completion\\n- Field descriptions & rich inline documentation\\n- Free Templates for YAML Samples \\n\\nThis feature helps the developer to validate the existing pipeline\u2019s correctness and helps in quick modification alongside copying of a pipeline as a code.\\n\\n\\n### Verify Variables\\n\\nA very integral part of troubleshooting errors in Harness CI is to verify the variables present in the pipeline and their values. Major configuration in the pipeline depends on the variables and verifying them becomes the easiest way to reach the root cause and potential solution of the problem.\\n\\nVisit the variables section on the Harness CI platform. Check if the expected variables and their values match and are implemented at the expected stage for the pipeline.\\n\\n### Delegate Setup Failure\\n\\nThe majority of the encountered errors in Harness CI revolve around delegate setup processes. Make sure you have a complete understanding of how to set up a harness delegate from scratch & understand how the Harness manager and delegate complement each other.\\n\\nDelegate setup also fails if the SSH key used for deployment to the targeted host is incorrect. This usually happens due to incorrect information about the SSH configuration in the Harness Secrets Management and also if the targeted host is not configured to support SSH connections.\\n\\nFor troubleshooting move to the ```watcher.log``` file that provides information about the deleted version.\\n\\n### Delegate fails to establish a connection with the Harness Manager\\n\\nIn case of connection failures for the delegate with the Harness Manager, we can use ping on the delegate host to test the response time for app.harness.io and other URLs are consistent or not. We can use the traceroute to check the network route and verify if there is any case of redirection. To verify if the DNS resolution is working fine we can implement nslookup.\\nWe can flush the client\'s DNS cache (Check for the OS). We can run tests to check for local network errors or NAT license limits. In the case of cloud service providers, we\u2019ll have to ensure that the security groups have outbound traffic allowed on HTTP 443.\\n\\n### No eligible delegate found for the assigned pipeline execution\\n\\nThis error is encountered when the delegate fails to achieve the URL criteria for validation. All delegates in harness are identified by their Harness account ID with some additional factors. For example, in VMs the delegates are identified with the combination of their hostname and IP address thus in case the IP changes the Harness Manager fails to identify the delegate. In the case of K8s and ECS delegates, the IP changes when the pod is rescheduled.\\n\\nThe delegate sends the heartbeat, deployment data & Time series, and log data for continuous verification to the Harness Manager. The credentials used by the Delegate must have the roles and permissions required to perform the task. For example, if the account used for an AWS Cloud Provider does not have the roles required for ECS deployments then it will fail.\\n\\nFor more information visit [How does Harness Manager Identify Delegates?](https://docs.harness.io/article/migeq3achl-harness-delegate-faqs#how_does_harness_manager_identify_delegates)\\n\\n### K8s Delegate Deletion Failure\\n\\nTo delete the Harness Delegate from the K8s cluster we\u2019ll have to delete the StateFulSet for the delegate. This ensures that the expected number of pods is running and available. Deletion of the delegate without deletion of the StateFulSet results in a recreation of the pod. \\n\\nFor example, if the delegate name is ```delegate-sample``` then we can delete StateFulSet with the command below\\n\\n```bash\\n$ kubectl delete statefulset -n harness-delegate delegate-sample\\n```\\n\\n### Triggers Rejection Failures\\n\\nThis usually happens when the user uses a webhook trigger to execute a pipeline or workflow and the name of the artifact in the cURL command is different from the name of the artifact.\\n\\n```bash\\nTrigger Rejected. Reason: Artifacts Are Missing for Service Name(S)\\n```\\n\\nThis is majorly a result of a bad name for an artifact build version when placed in the cURL command. For example a cURL with build number **v1.0.4-RC8:**\\n\\n```bash\\ncurl -X POST -H \'content-type: application/json\'\\n--url https://app.harness.io/gateway/api/webhooks/... . .\\n-d \'{\\"application\\":\\"tavXGH . . z7POg\\",\\"artifacts\\":[\\n{\\"service\\":\\"app\\",\\"buildNumber\\":\\"v1.0.4-RC8\\"}]}\'\\n```\\n\\nIn case the Harness Service artifacts have a different nomenclature the cURL command will fail to execute. Thus ensuring the webhook cURL command has the correct artifact name becomes very important. \\n\\n### Failure when executed Git Push in Harness\\n\\nIn case of two-way sync between the Git repository and the Harness Application, the push to Harness will result in failure unless the GIT YAML files and the required settings are configured before pushing the app to Harness.\\n\\nFor example, in case we have a predefined infrastructure definition and the required labels or parameters are not filled or filled in incorrectly the push to git is more likely to encounter a failure.\\n\\nUsing the Harness Manager to configure the app at first is the best way to encounter this error. This generally ensures that all the required settings are configured correctly and synced with the git repository. \\n\\n### Triggers: zsh: no matches found\\n\\nIn some of the OS versions specifically in MACOS, the default shell is zsh. The zsh shell requires the cURL command to not use the \u201c?\u201d character or put quotes around the URL.\\n\\nFor example;\\n```bash\\ncurl -X POST -H \'content-type: application/json\' --url https://app.harness.io/gateway/api/webhooks/xxx?accountId=xxx -d \'{\\"application\\":\\"fCLnFhwsTryU-HEdKDVZ1g\\",\\"parameters\\":{\\"Environment\\":\\"K8sv2\\",\\"test\\":\\"foo\\"}}\'\\n```\\n\\nThis shall work\\n\\n```bash\\ncurl -X POST -H \'content-type: application/json\' --url \\"https://app.harness.io/gateway/api/webhooks/xxx?accountId=xxx -d \'{\\"application\\":\\"fCLnFhwsTryU-HEdKDVZ1g\\",\\"parameters\\":{\\"Environment\\":\\"K8sv2\\",\\"test\\":\\"foo\\"}}\'\\"\\n```\\n\\n### User does not have \\"Deployment: execute\\" permission\\n\\nThe error User does not have ```\\"Deployment: execute\\"``` permission reflects back to the user\u2019s **Application Permission > Settings** does not involve ```execute```. This can be solved by resolving the application permission configuration. The user can easily modify the Harness Configure as Code YAML files for the harness application. \\n\\nTo enable editing of the YAML file make sure the user\u2019s Harness User Groups must have the account permission ```Manage Applications``` enabled. Also the Application Permissions ```Update``` enabled for specific applications\\n\\n### NOT ABLE TO TROUBLESHOOT THE ENCOUNTERED ERROR\\n\\nIn case the user is unable to troubleshoot the application error or pipeline execution failures the user can log/submit a ticket to Harness Support. To log a ticket follow the process:\\n\\n1. Click the **Help** button in the Harness Manager\\n2. Click **Submit a Ticket** or **Send Screenshot**\\n3. Fill out the pop up form and click **Submit Ticket** or **Send Feedback**"},{"id":"git-connector","metadata":{"permalink":"/blog/git-connector","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-09-git-connector/git-connector.md","source":"@site/blog/2022-10-09-git-connector/git-connector.md","title":"Beginners Guide to Git Connectors","description":"Are you confused with terminologies like Access Token, Access Control, and Personal Access Token while creating connectors? In this article, we will discuss a few such terminologies on the Harness platform, what they mean and what values should be entered against them.","date":"2022-10-09T00:00:00.000Z","formattedDate":"October 9, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"continuous-delivery","permalink":"/blog/tags/continuous-delivery"},{"label":"connectors","permalink":"/blog/tags/connectors"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":2.92,"hasTruncateMarker":false,"authors":[{"name":"Debabrata Panigrahi","title":"Software Engineer","url":"https://github.com/Debanitrkl","imageURL":"https://github.com/Debanitrkl.png","key":"debabrata"}],"frontMatter":{"slug":"git-connector","title":"Beginners Guide to Git Connectors","authors":["debabrata"],"tags":["continuous-integration","continuous-delivery","connectors","harness","cme"]},"prevItem":{"title":"Troubleshooting Guide: Harness CI","permalink":"/blog/troubleshooting-harness-ci"},"nextItem":{"title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","permalink":"/blog/delegate-minikube-install"}},"content":"Are you confused with terminologies like Access Token, Access Control, and Personal Access Token while creating connectors? In this article, we will discuss a few such terminologies on the Harness platform, what they mean and what values should be entered against them. \\n\\nSo, in Harness when you are using CI/CD to build or deploy we need access to your source code repository and the enterprise cloud for deployments, and hence encrypted secrets are asked as input. In this blog, I have focused on the common errors faced by beginners while trying to setup GitHub connectors. \\n\\nTo begin with:\\n\\n1. Select new connector and from the new connector tab select Github under Code Repositories\\n\\n    ![Connector Location](connector-location.png)\\n\\n2. Now it\u2019s time to give a name to your connector, but there\u2019s some [entity name convention](https://docs.harness.io/article/7rsydu6iq2) which you need to follow while naming it. \\nSome common errors observed here are :\\nFor ease of understanding across orgs and easy identification, you can also add tags and give an apt description to your connector. \\n\\n    ![Overview](./overview.png)\\n\\n3. It\u2019s time for one of the most confusing steps of the process, giving the exact address for your connector which comes in two levels\\n    1. Account \\n    2. Repository\\n\\n    What\u2019s most intriguing and that first time user\u2019s like me, made a mistake in selecting the connection type,  so the suggested method is HTTP for first timers for ease of use and you can fetch this URL for your repository directly from the search bar of your browser or from local clone information available in the repository, which has the following format ``https://github.com/<account-name>`` for account URL\u2019s type and ``https://github.com/<account-name>/<repository-name>`` for Repository URLs.   \\n\\n    ![Details](./details.png)\\n\\n4. Now, it\u2019s time to add credentials, which are required for the authentication to GitHub repository. \\n\\n    ![Credentials](./credentials.png)\\n\\n    The value in the username field is the same as your GitHub username, and now the most crucial step of adding credentials, is adding the Personal Access Token as a secret, for that, you need to generate the PAT for your account by allowing adequate repo source control permission, which could be done by following the steps [here](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-token). Further if you already have a PAT as a secret you could just skip to selecting the same, or else you need to add the generated PAT by selecting the \u201c+New Secrets\u201d and mentioning the PAT under the \u201cSecret Value\u201d field.\\n\\n    ![Secrets](./secrets.png)\\n    \\n    Be careful not to add your GitHub password under the secrets for GitHub, as some users tend to do this and the connector fails to connect. \\n\\n5. Now while connecting to the provider it\u2019s suggested to go for the connect through delegate step as it would allow delegates to perform tasks for you based on your requirements. \\n\\n    ![Delegate-Setup](./delegate-setup.png)\\n\\n6. Going further to the Delegate Setup step, I would suggest using any available delegate as a beginner, or if you want to use a particular delegate, select the same and click on the empty field under the same to select and add the delegates. \\n\\n7. What\u2019s important to consider here is if you\u2019re an absolute beginner using Harness for the first time, or have never created a delegate, please consider creating a delegate first by selecting the \u201cInstall new delegate\u201d and following the resources mentioned [here](https://docs.harness.io/article/0slo2gklsy-delegate-how-tos), to move forward and add a connector. \\n\\n\\nNeed further help? \\nFeel free to ask questions at [community.harness.io](https://community.harness.io/c/harness/7) or  [join](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) community slack to chat with our engineers in product-specific channels like:\\n\\n1. [#continuous-delivery](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw)  Get support regarding the CD Module of Harness.\\n2. [#continuous-integration](https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw) Get support regarding the CI Module of Harness."},{"id":"delegate-minikube-install","metadata":{"permalink":"/blog/delegate-minikube-install","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-09-install-delegate-minikube/installing_kubernetes_delegate.md","source":"@site/blog/2022-10-09-install-delegate-minikube/installing_kubernetes_delegate.md","title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","description":"Before we begin :","date":"2022-10-09T00:00:00.000Z","formattedDate":"October 9, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"continuous-delivery","permalink":"/blog/tags/continuous-delivery"},{"label":"connectors","permalink":"/blog/tags/connectors"},{"label":"harness","permalink":"/blog/tags/harness"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":2.06,"hasTruncateMarker":false,"authors":[{"name":"Krishika Singh","title":"Community Engineer @ Harness","url":"https://github.com/krishi0408","imageURL":"https://github.com/krishi0408.png","key":"krishikasingh"}],"frontMatter":{"slug":"delegate-minikube-install","title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","authors":["krishikasingh"],"tags":["continuous-integration","continuous-delivery","connectors","harness","cme"]},"prevItem":{"title":"Beginners Guide to Git Connectors","permalink":"/blog/git-connector"},"nextItem":{"title":"Getting started with the Harness Platform","permalink":"/blog/harness-getting-started"}},"content":"## Before we begin :\\nLet us understand what do we mean by delegates and why is it needed \\n\\nA Harness delegate is a software that you install in your deployment target environment such as local network ,VPC,or cluster and run as a service.The delegate performs all operations including deployment and integration.\\nThe delegate connects all your artifacts,infrastructure,collaboration,verification and other providers with the Harness Manager.\\n\\n\\nBelow we have discussed the detailed explanation of how we can install Kubernetes(K8s) delegate.\\n\\n## Prerequisites \\n- Hypervisor technology (VirtualBox, VMWare, etc) is a mandate pre-requisite for Minikube and we have to choose the right one based on the platform we are on.\\n\\n     [Prequisites for minikube](https://minikube.sigs.k8s.io/docs/start/#what-youll-need)\\n\\n- Installation section in the Minikube Getting Started documentation is well crafted and has steps for all Linux, Mac & Windows along with the architecture and installer type details and the user just has to choose the required details, get the commands and run them!\\n\\n    [Installing Minikube](https://minikube.sigs.k8s.io/docs/start/).\\n\\n- Minikube will download the required kubectl as part of the installation and configures it.\\n\\n## Installing Harness Delegate\\n\\n- Go to  [Harness](https://app.harness.io)\\n\\n- Go to Builds and under Project setup click delegates and then click on new delegates \\n![delegate](4.png)\\n\\n\\n- Click on kubernetes\\n\\n   ![kubernetes](5.png)\\n\\n- **Name** your delegate and select the **size of delegate** and also select delegate permissions.\\nPlease follow the correct naming convention for naming a delegate.\\n   - It will show error when you insert any special characters except \u2018-\u2019 and make  sure name should not start or end with a number \\n  ![delegate](6.png)\\n\\n> NOTE:These sizing requirements are for the Delegate only.Your cluster will require more memory for Kubernetes, the operating system, and other services,preferably one should have double the memory and node present in the cluster than that of required for the delegate for smooth functioning.\\n\\n- Download the yaml file\\n  ![yaml](7.png)\\n\\n- After clicking on continue open the new terminal and open the directory where you have downloaded the yaml file  and then run the following command:\\n\\n    ```kubectl apply -f harness-delegate.yml```\\n\\n  ![download](8.png)\\n\\n- It may take few minutes for verification,after successful installation of delegate following message will be displayed:\\n\\n![download2](9.png)\\n\\n- You can go to the delegate section in the project setup and see the delegate you have installed:\\n\\n![delegate option](10.png)\\n\\n- You can also delete your delegate when no longer in use  \\n\\n> Note: Our Kubernetes Delegates are immutable , that is you can only create and delete the delegate but you can\u2019t make any changes to them."},{"id":"harness-getting-started","metadata":{"permalink":"/blog/harness-getting-started","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-07-Harness-Platform/getting_start_harness_platform.md","source":"@site/blog/2022-10-07-Harness-Platform/getting_start_harness_platform.md","title":"Getting started with the Harness Platform","description":"Hey\xa0!! new to the Harness Platform, we are here to help you find your way around.","date":"2022-10-07T00:00:00.000Z","formattedDate":"October 7, 2022","tags":[{"label":"harness","permalink":"/blog/tags/harness"},{"label":"beginners-guide","permalink":"/blog/tags/beginners-guide"},{"label":"getting-started","permalink":"/blog/tags/getting-started"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":4.75,"hasTruncateMarker":false,"authors":[{"name":"Krishika Singh","title":"Community Engineer @ Harness","url":"https://github.com/krishi0408","imageURL":"https://github.com/krishi0408.png","key":"krishikasingh"}],"frontMatter":{"slug":"harness-getting-started","title":"Getting started with the Harness Platform","authors":["krishikasingh"],"tags":["harness","beginners-guide","getting-started","cme"]},"prevItem":{"title":"Installing Harness Kubernetes(K8s) delegate via MiniKube","permalink":"/blog/delegate-minikube-install"},"nextItem":{"title":"Harness CI - Background Step","permalink":"/blog/harness-ci-background-step"}},"content":"Hey\xa0!! new to the **Harness Platform**, we are here to help you find your way around.\\n\\nHarness is the industry\'s first **Software Delivery Platform** to use AI to simplify your DevOps processes\u200a-\u200aCI, CD, Feature Flags, Cloud Costs, and much more.\\n\\nLet\'s get started with a short introductory video about the harness platform.\\n\\n<div className=\\"iframe-wrapper\\">\\n<iframe\\n    src=\\"https://www.youtube.com/embed/I4sbENt4IeM\\"\\n    frameborder=\\"0\\"\\n    allow=\\"autoplay; encrypted-media\\"\\n    allowfullscreen\\n>\\n</iframe>\\n</div>\\n\\nHope you have got an idea of how interesting is the Harness Platform.\\n\\nDon\'t forget to [signup](https://app.harness.io/auth/#/signin) at Harness platform to play around with the product.\\n\\nLet\'s dive deep and explore our products so that we can help you around with your goals.\\n\\nBefore starting we highly recommend you to go through some basic [key concepts](https://docs.harness.io/article/hv2758ro4e-learn-harness-key-concepts) about Harness Platform.\\n\\n# Harness CI(Continuous Integration)\\n\\nHarness CI simplifies the development and testing of code. In Harness Pipelines, you visually model your build and test processes as CI Stages. Each Stage includes steps for building, testing, and pushing your code.\\n\\nWell let\'s get you started with your first pipeline, and we are sure you are going to enjoy it, Harness has step by step guide for building different sample pipelines for different languages, you can try any one of them or all of them:\\n\\n- [Python Sample Pipeline](https://github.com/harness-community/python-pipeline-samples)\\n- [Node Sample Pipeline](https://github.com/harness-community/nodejs-pipeline-samples)\\n- [Go Sample Pipeline](https://docs.harness.io/article/x0d77ktjw8-ci-pipeline-quickstart)\\n\\nDon\'t forget to through the docs as well as the courses:\\n\\n- [Harness CI docs](https://docs.harness.io/category/zgffarnh1m-ci-category)\\n- [Harness CI University](https://university.harness.io/page/continuous-integration)\\n\\n# Harness CD(Continuous Delivery)\\n\\nHarness CD is a Self-Service Continuous Delivery module that enables engineers to deploy on-demand without scripts, plugins, version dependencies, toil, downtime, and anger.\\n\\nIn each Stage, you define what you want to deploy using Services, where you want to deploy it using Environments, and how you want to deploy it using Execution steps.\\nYou can refer to the docs below and get familiar with some basics as well deployment tutorials.\\n\\nYou can go through the following docs to get familiar with the basics as well as deployment tutorials as well as sample CD pipeline for you to try out:\\n\\n- [CD Sample Pipeline](https://github.com/harness-community/cd-pipeline-sample)\\n- [CD how to](https://docs.harness.io/category/pfzgb4tg05-howto-cd)\\n\\nYou can go through Harness docs as well as Harness University courses to get clarity on Harness CD:\\n\\n- [Harness CD Docs](https://docs.harness.io/category/pfzgb4tg05-howto-cd)\\n- [Harness CD University](https://university.harness.io/page/continuous-delivery)\\n\\n# Feature Flags\\n\\nEmpower product development teams to quickly release new features, with minimal risk. Test with a specified subset, or roll out to all customers.\\n\\n**Feature flags** create private swim lanes for developers where they can ship the feature directly to customers and then control who sees it, get feedback and turn it on and off when needed.\\n\\nWe recommend you follow the below blog and implement your first feature flag, I am sure you are going to love the way it works:\\n\\n- [Implement your first Feature Flag](https://harness.io/blog/implement-your-first-feature-flag)\\n\\nThere are some well curated courses as well as docs on Feature Flags that will help you get a much deeper insight into the product\xa0:\\n\\n- [Harness Feature Flags Docs](https://docs.harness.io/category/vjolt35atg-feature-flags)\\n- [Harness Feature Flags University Course](https://university.harness.io/page/harness-feature-flags)\\n\\n# Cloud Cost Management(CCM)\\n\\nHarness Cloud Cost Management empowers engineers with cloud cost visibility of their apps, microservices, and clusters. The best part? Tagging isn\'t required.\\n\\nHarness provides curated docs as well as courses that can surely help you out with the concept of CCM:\\n\\n- [Harness CCM docs](https://docs.harness.io/category/exgoemqhji-ccm)\\n- [Harness CCM University Course](https://university.harness.io/page/harness-cloud-cost-management)\\n\\n# Service Reliability Management\\n\\nHarness Service Reliability Management (SRM) module helps engineering and DevOps teams to balance feature velocity and bug fixes along with the stability and reliability needs in a production environment.\\n\\nYou can refer to the below docs as well as some organized courses and get yourself onboard with the basics as well the usage of Service Reliability Management:\\n\\n- [Harness SRM Blogs](https://docs.harness.io/category/ko19u4brsv-howtos-service-reliability-management)\\n\\nThose who want to try out SRM, we recommend them to go through the Harness SRM Practitioner exam it will help you in gaining much deeper product knowledge:\\n\\n- [SRM Practitioner Exam](https://university.harness.io/path/srm-practitioner/srm-comprehensive-quiz)\\n\\n# Chaos Engineering\\n\\nChaos engineering is the discipline of experimenting with a software system in production to build confidence in the system\'s capability to withstand turbulent and unexpected conditions.\\n\\nYou can go through the below docs and learn more about chaos engineering, we recommend you go through the quick-start guide provided in the documentation and try out your first chaos experimentation:\\n\\n- [Chaos Engineering Docs](https://university.harness.io/path/harness-chaos-engineering-practitioner)\\n\\nHarness has structured courses on Chaos Engineering and those who want to try chaos engineering should surely give the Harness Chaos Practitioner Exam:\\n\\n- [Harness Chaos Practitioner Exam](https://university.harness.io/path/harness-chaos-engineering-practitioner)\\n\\n# Security Testing Orchestration\\n\\nHarness Security Testing Orchestration (STO) enables DevOps and DevSecOps teams to left shift security testing. STO orchestrates scanning, intelligently deduplicating scanner output, prioritizing remediations, and enforcing governance into your Pipeline.\\n\\nSTO puts scanning directly into your Pipelines to ensure that vulnerabilities are caught and fixed before your products are ever released.\\n\\nYou can surely have a look in the below video about the introduction as well as a demo of STO:\\n\\n<div className=\\"iframe-wrapper\\">\\n<iframe\\n    src=\\"https://www.youtube.com/embed/dIT8utE_fvU\\"\\n    frameborder=\\"0\\"\\n    allow=\\"autoplay; encrypted-media\\"\\n    allowfullscreen\\n>\\n</iframe>\\n</div>\\n\\nYou can go through the below docs and get through the basics of the product:\\n\\n- [Security Testing Orchestration docs](https://docs.harness.io/category/txlccquh5c-sto-category)\\n\\n# Software Delivery Foundations Certification\\n\\nYou can also give Harness Software Delivery Foundations Certification, it will surely help you in getting much deeper knowledge about the\xa0product.\\n\\n- [Software Delivery Foundations Certification](https://university.harness.io/page/certifications)\\n\\n# Important links\\n\\n- [Harness Docs](https://docs.harness.io)\\n- [Harness Blogs](https://harness.io/blog/)\\n- [Harness University](http://university.harness.io)\\n\\n\ud83c\udf08Join the growing community on Slack, refer [Harness Community Communications Guide](https://github.com/harness-community/overview/blob/main/community_communication_guide.rst) to interact with the wider community users/contributors, or create topics in [community.harness.io](https://community.harness.io)\\n\\nWe at Harness are always there to help our community, feel free to slack us on our Community Slack channel (P.S don\'t forget to join the channel). You can also reach out to us at [discourse](https://community.harness.io)."},{"id":"harness-ci-background-step","metadata":{"permalink":"/blog/harness-ci-background-step","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-05-CI-BackgroundStep/all_about_background_step.md","source":"@site/blog/2022-10-05-CI-BackgroundStep/all_about_background_step.md","title":"Harness CI - Background Step","description":"Introduction","date":"2022-10-05T00:00:00.000Z","formattedDate":"October 5, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"integration-test","permalink":"/blog/tags/integration-test"}],"readingTime":2.85,"hasTruncateMarker":false,"authors":[{"name":"Krishika Singh","title":"Community Engineer @ Harness","url":"https://github.com/krishi0408","imageURL":"https://github.com/krishi0408.png","key":"krishikasingh"}],"frontMatter":{"slug":"harness-ci-background-step","title":"Harness CI - Background Step","authors":["krishikasingh"],"tags":["continuous-integration","integration-test"]},"prevItem":{"title":"Getting started with the Harness Platform","permalink":"/blog/harness-getting-started"},"nextItem":{"title":"Harness CI Onboarding - Beginners Guide","permalink":"/blog/harness-ci-onboarding"}},"content":"## Introduction\\n\\nBackground steps are useful for running services that need to run for the entire lifetime of a build. This can be used when user wants to run something in background throughout the stage execution or when you want to run an end to end test, redis service or mysql local service to run some operations  \\n\\n![Background Step Introduction](./background_step_introduction.png)\\n\\nBefore diving deep into background step further, let\u2019s talk about service dependencies, how it helped and what were the shortcomings that service dependencies had that we have to introduce the background step \\n\\n**Service Dependency** is a detached service that\'s accessible to all steps in a stage. Service dependencies support workflows such as\\n- **Integration testing:** You can set up a service and then run tests against this service.\\n- **Running Docker-in-Docker:** You can set up a dind service to process Docker commands in Run Steps.\\n\\nWell you can see how important it was to introduce service dependency in your pipeline but then why did we introduce the background step?\\n\\nWell service dependency did have some shortcomings which background step could solve easily for example:\\n\\n1. Suppose you want to run a cypress server which needs some custom commands to start, you won\u2019t be able to do that with a service dependency but with a background step as it accepts commands so with the help of that you can write a script and run any service.\\n\\n2. Suppose you want redis,postgres and node js server to run together,with the help of service dependency you will have to define it separately but with the background step you can easily do that by adding a docker compose file ( the docker file either needs to be downloaded or we can easily use the one present in the git repo) and then doing docker-compose up with the help of command functionality. \\n\\n![Background Step Pipeline](./background_step_pipeline.png)\\n\\nWe discussed about some of the shortcomings of service dependency that background step could solve, let\u2019s have a detailed look on three of the major differences between the two:\\n\\n\\n### Background step support commands\\n\\n![Background Step Settings](./background_step_settings.png)\\n\\nLet\u2019s say you are running some local server and you want to run some pre command or you want to fetch some file before running the server , there is an optional field called command in the background step. With the support of this optional functionality it acts as a run step now .\\n\\n### Background step can be added anywhere in the pipeline execution\\n\\nThe background step can be added anywhere during the pipeline execution, thus making it flexible for the user.\\n\\n### Background step supports Templatization\\n\\nThe background step supports templates that can be reused across Pipelines which enhance developer productivity,reduce onboarding time,and enforce standardization across the teams. \\nAlso ,the background step supports sequential approvals, that is when one step is completed then only you can move to the other step,whereas service dependency was running all the commands at the same time.\\n\\nTo know more about templates visit [Templates](https://docs.harness.io/article/6tl8zyxeol-template).\\n           \\n#### Some important points:\\n\\n- A Background step starts a service and then proceeds. For any later step that relies on the service,it is good practice to verify that the service is running before you send requests.\\n\\n- If the pipeline runs on a VM build infrastructure, you can run the background service directly on the VM rather than in a container.To do this, leave the Container Registry and Image fields blank."},{"id":"harness-ci-onboarding","metadata":{"permalink":"/blog/harness-ci-onboarding","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-05-Harness-CI-Onboarding/harness-ci-onboarding.md","source":"@site/blog/2022-10-05-Harness-CI-Onboarding/harness-ci-onboarding.md","title":"Harness CI Onboarding - Beginners Guide","description":"Introduction","date":"2022-10-05T00:00:00.000Z","formattedDate":"October 5, 2022","tags":[{"label":"continuous-integration","permalink":"/blog/tags/continuous-integration"},{"label":"harness-ci","permalink":"/blog/tags/harness-ci"},{"label":"beginners-guide","permalink":"/blog/tags/beginners-guide"},{"label":"getting-started","permalink":"/blog/tags/getting-started"},{"label":"cme","permalink":"/blog/tags/cme"}],"readingTime":9.99,"hasTruncateMarker":false,"authors":[{"name":"Dhrubajyoti Chakraborty","title":"Community Engineering Intern","url":"https://github.com/codewdhruv","imageURL":"https://media-exp1.licdn.com/dms/image/C5603AQFvCMGToV9LMQ/profile-displayphoto-shrink_800_800/0/1631719718974?e=1670457600&v=beta&t=vWbeVBiAvAYLTdxYcAnIqzuvveJ8IWleCDV0A5Fdbp0","key":"dhrubajyoti"}],"frontMatter":{"slug":"harness-ci-onboarding","title":"Harness CI Onboarding - Beginners Guide","authors":["dhrubajyoti"],"tags":["continuous-integration","harness-ci","beginners-guide","getting-started","cme"]},"prevItem":{"title":"Harness CI - Background Step","permalink":"/blog/harness-ci-background-step"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"## Introduction\\n\\nThis beginner guide aims to help learners learn about the basic components of Harness CI and develop an understanding of the DevOps ecosystem involved in the Software Development lifecycle. In this article we will learn about the basic features of Harness CIE and also get started by building the first basic sample pipeline.\\n\\nEngineering team is usually expected to deliver error-free code at high frequency. A fast and reliable CI/CD pipeline is a major part for implementation of that in a sustainable model over time. Harness Continuous Integration tool which is built with test intelligence, native secrets, fine-grained RBAC, and extensible governance  as one of the best solutions in the marketplace for automated pipelines. Automated pipelines remove user errors, provide feedback loops to developers and helps enable fast product iterations.\\n\\n**What is a pipeline?**\\n\\nA Pipeline is an end-to-end process that delivers a new version of your software. It can be considered to be a cyclical process that includes integration, delivery, operations, testing, deployment, real-time updates, and metrics monitoring.\\n\\nFor example: A pipeline can use the CI module of Harness to build, test & push code and then also a CD module to deploy the artifact to the production environment.\\n\\n### Prerequisites\\n\\n\\n- Github Account ([Check out the other source code managers here](https://docs.harness.io/article/kqik8km5eb-source-code-manager-settings#source-code-manager-settings))\\n- Docker Hub Account & Repository ([Other artifactory packages](https://docs.harness.io/article/66ykcm0sf0-build-and-push-to-gcr-step-settings))\\n- Installation of K8s Delegate for Harness Delegate\\n- About Harness CI\\n- Features in Harness CI\\n- Getting Started with your first pipeline\\n- Troubleshooting frequently encountered issues\\n- Conclusion: Developer Feedback on Harness CIE\\n- What\u2019s Next?\\n\\n### Environment\\n\\n- Ubuntu 20.04/22.04\\n\\n### Requirements\\n- Kubernetes cluster for Harness Delegate and build farm.\\n- You\'ll need a Kubernetes cluster for Harness to use for the Harness Delegate and as a build farm. Ensure you have a cluster that meets the following requirements:\\n- Number of pods: 3 (two pods for the Harness Delegate, the remaining pod for the build farm).\\n- Machine type: ```4vCPU```\\n- Memory: 16GB RAM. The build farm and Delegate requirements are low but the remaining memory is for Kubernetes, the Docker container, and other default services.\\n- Networking: Outbound ```HTTPS``` for the Harness connection, and to connect to Docker Hub. Allow TCP port 22 for SSH.\\n- Namespace: When you install the ```Harness Delegate```, it will create the ```harness-delegate``` namespace. You\'ll use the same namespace for the build farm.\\n\\nA **Kubernetes service account** with permission to create entities in the target namespace is required. The set of permissions should include ```list```, ```get```, ```create```, and ```delete``` permissions. In general, the cluster-admin permission or namespace admin permission is enough.\\nFor more information see [User-Facing Roles](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles) from Kubernetes.\\n\\nThis tutorial implements creation of a pipeline over a github repository thus you\u2019ll be required to create a github account & host a project over a repository. To create a new repository on github follow these steps:\\n\\n1. Move to the upper-right corner on the github webapp & use the  drop-down menu to select New repository option.\\n\\n![create-new-repository](./repo-create.png)\\n\\n2. Type the name of the repository. The repository name is unique & cannot be same as already hosted repo names.\\n\\n![repo-name](./create-repository-desc.png)\\n\\n3. Select the repository visibility & click on create repository.\\n\\n![repo-public](./create-repository-public-private.png)\\n\\n![create-repo](./repo-create.png)\\n\\n### Installing Docker Engine\\n\\nTo get started with Docker Engine make sure you meet the [prerequisites](https://docs.docker.com/engine/install/ubuntu/#prerequisites) then install Docker. Older versions of Docker were called ```docker```, ```docker.io```, or ```docker-engine```. If these are installed uninstall them with this command.\\n\\n```bash\\nsudo apt-get remove docker docker-engine docker.io containerd runc\\n```\\n\\n**[Check out this documentation to get your Docker Engine installed](https://docs.docker.com/engine/install/)**\\n\\n\\n### Installation of K8s Delegate for Harness Delegate\\n\\nHarness Delegate is the service that connects all the components of the pipeline i.e artifact, infrastructure, collaboration, verification and other providers with the Harness Manager. It performs all the operations in the deployment lifecycle. Here we\u2019ll install Kubernetes Delegate.\\n\\n1. Move to the Harness Platform, in the Manager section click on setup and select Delegates.\\n2. In the delegates tab, click on the install delegate option with preference to Kubernetes YAML as the download type.\\n3. Update the name and profile and download the K8s Delegate or copy the download link.\\n4. Navigate to the harness-delegate-kubernetes folder that you extracted in the terminal using the following command\\n\\n```bash\\ntar -zxvf harness-delegate-kubernetes.tar.gz\\n\\ncd harness-delegate-kubernetes\\n```\\n\\nWith this you will directly connect with your cluster from the terminal and thus can easily copy the YAML file over.\\n\\n5. To verify the connection of your created K8s Delegate with the Harness Platform use the following command\\n\\n```bash\\nwget -p https://app.harness.io/ -O /dev/null\\n```\\n\\n6. Now we\u2019ll install the harness delegate using the `harness-delegate.yaml` file using this command\\n\\n```bash\\nkubectl apply -f harness-delegate.yaml\\n```\\n\\n7. To verify that the delegate pod was created run the following command.\\n\\n```bash\\nkubectl get pods -n harness-delegate\\n```\\n\\nWith this now you\'re ready to connect Harness to your artifact servers, clusters, and so on.\\n\\n\\n### About Harness CI\\n\\nHarness CI is powered by Drone the most popular open source CI tool. It\u2019s built for speed and developer experience. Onboarding it is simple and this is what this guide is about.\\n\\nHarness alongside the open source counterpart Drone introduced new features to scale the developer onboarding experience and reduce the time involved in the process drastically as compared to the industry standards.\\n\\n**Harness CI\u2019s major features are the following:**\\n\\n1. Containerized Steps (Zero Dependencies)\\n2. Visual Pipeline Builder with YAML Config as Code\\n3. Git Operations, Secrets & Fine grained RBAC for security etc\\n4. Test Intelligence\\n5. Integrated Platform\\n\\n### Getting Started with your first pipeline\\n\\nPipelines are a group of one or more stages. They are responsible for managing and automating builds, testing, deployments, and other important build and release stages.\\n\\nTo create a new Pipeline in Harness CI follow the steps below:\\n\\n1. Move to the Harness Platform, click on projects. Create a new project incase you haven\u2019t already created one.\\n2. Move to the modules section and click on Continuous Integration & click on create a new pipeline.\\n3. Enter the name for the pipeline & click on start. It usually takes 2-4 min for the provisioning stage of the pipeline.\\n\\n<div className=\\"iframe-wrapper\\">\\n<iframe\\n    src=\\"https://www.youtube.com/embed/251WU_OG0BI\\"\\n    frameborder=\\"0\\"\\n    allow=\\"autoplay; encrypted-media\\"\\n    allowfullscreen\\n>\\n</iframe>\\n</div>\\n\\n\\nThe backbone of the pipeline is the build stage. This is where the user specifies the pipeline configuration details as the codebase to build, the infrastructure, the build workflow and all other additional components. The next step involves establishing the connection of the pipeline with the external resource. We use a ```connector``` in Harness CIE to develop this pipeline connection. The ```connector``` is a configurable object that automatically establishes connection to an external resource. \\n\\nTo create the Build Stage follow the steps given below: \\n\\n1. Move to the newly created pipeline in the Pipeline Studio, add a stage & select build.\\n\\n2. Add a stage name & under the configure codebase select connect connector.\\n\\n3. Click on New Creator & give preference to Github Connector from all the available options for connector type. \\n\\nTo configure the connector successfully provide the following details i.e \\na. URL Type as a Repository\\nb. Connection Type as HTTP\\nc. GitHub Repository URL\\n\\nYou\u2019ll also have to verify the github username & PAT\u2019s to make use of the connector. These secrets are stored in the Harness Secret Manager. \\n\\n4. Once the connector has been configured with the necessary credentials select Enable API Access.\\n\\n5. The connectivity medium can be directly through Harness Platform or through an delegate service running in an external resource. \\n\\n6. In this guide we\u2019ll install the delegate into the K8s cluster. Select Connect Through An Harness Delegate from the available options.\\n\\n7. Install the new delegate with infrastructure type as Kubernetes.\\n\\n8. Configure the delegate information as Name, Size, Permissions etc & install the delegate using the workspace definition YAML file that can be installed directly to the build infrastructure.\\n\\n9. Download the YAML script and run it on the previously created cluster from the terminal.\\n\\n10. Login to the K8s cluster from the same terminal and click on connect option.\\n\\n11. Install the Harness Delegate using the ```harness-delegate.yaml``` file using the following command.\\n\\n\\n\\n```bash\\n$ kubectl apply -f harness-delegate.yaml\\n```\\n\\n12. Set up the Delegate with the necessary configuration from the Delegate Setup option.\\n\\n13. Once the delegate is setup successfully you\u2019ll see the connector & repo details in the About your stage component.\\n\\n14. Select on setup stage and the new stage will be added to the pipeline.\\n\\nThe next step is to set up & define the Build Farm Infrastructure under the pipeline configuration settings. To setup the BFI follow the steps below:\\n\\n1. Select the newly created K8s cluster & create a new connector. Specify details as Name, Details, Delegates Setup & Connection Test.\\n2. Once verified click on Finish to add the new connector to the K8s Cluster Field.\\n3. Verify the namespace carefully and move to the Execution component of the pipeline.\\n\\nNow we can build & run tests over & against the hosted code. Move to the Execution Tab of the pipeline & add the step to run the steps. Follow the following steps to setup the Execution workflow of the pipeline:\\n\\n1. Add a run step to the pipeline & configure it as follows: \\n    - Give the step an appropriate name\\n    - Click on add a new connector option under the container registry option.\\n    - Select the connector type as Docker Registry\\n\\n2. We\u2019ll now create a new connector to the DockerHub account. Specify the account credentials and configure the secrets.\\n\\n![docker-img](./ci-tut-04-docker-connector-02-details.png)\\n\\n3. Verify the connection test & once successful click on Finish. Now we can Configure Run Step pane, with the new Connector in the Container Registry setting. \\nConfigure the step as follows:\\n- Give an appropriate step name.\\n- The Container Registry should show the Docker Hub Connector you just created.\\n- Image: ```golang:1.15```\\n- Command:\\n\\n\\n```bash\\ngo get gotest.tools/gotestsum\\ngotestsum --format=standard-verbose --junitfile unit-tests.xml || true\\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo\\n```\\n\\nThe last line contains the go build command to compile the package, along with its dependencies. Once configured click on Apply changes & save the pipeline.\\n\\nNow we can add the step to build & push the created image into the DockerHub repository. A repository in DockerHub is required to receive the artifacts from the pipeline. Add a step and specify the DockerHub account credentials. \\n\\nConfigure the step as follows:\\n\\n- Select Name as the Step name you defined earlier.\\n- Select the Docker Hub Connector you set up previously.\\n- Paste the docker repository URL & specify the tags: ```<+pipeline.sequenceId>```\\n- After successfully configuring the step components select Apply Changes & save the pipeline.\\n\\nThe pipeline is now ready for execution & can be used for running tests. \\nYou can also add the Integration Tests to the pipeline. To execute the pipeline click on Run. Select Git Branch and the git branch name when prompted such as main and click on Run Pipeline\\n\\nYou can view the logs of each step by clicking on it or else can also switch to the console view for more tracking down the micro details.\\nThe entire pipeline is also available in YAML. You can directly make changes to the YAML file and save the changes and it will automatically be reflected in the pipeline when executed.\\n\\n### Conclusion - Developer Feedback on Harness CIE\\n\\nDevelopers spend a lot of time into coding & solving the engineering problems. With Harness CIE we can now easily cut down the operational & functional time cost drastically. The added advantage to the features of CIE is the User Interface of CIE which is sleek and easy \\n& solves major issues of longer build and testing time. Harness CIE automatically scales up the build, test and deploy cycles. \\n\\nThe product focuses on developers & is completely developer-centric built around what a developer seeks to be the one stop solution for CI/CD."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/harness-community/harness-community.github.io/tree/main/website/blog/2022-10-01-welcome/index.md","source":"@site/blog/2022-10-01-welcome/index.md","title":"Welcome","description":"Hey y\'all amazing users of Harness Community!","date":"2022-10-01T00:00:00.000Z","formattedDate":"October 1, 2022","tags":[{"label":"community","permalink":"/blog/tags/community"},{"label":"blog","permalink":"/blog/tags/blog"},{"label":"newuser","permalink":"/blog/tags/newuser"},{"label":"ompragash","permalink":"/blog/tags/ompragash"}],"readingTime":0.71,"hasTruncateMarker":false,"authors":[{"name":"Ompragash Viswanathan","title":"Senior Software Engineer","url":"https://github.com/Ompragash","imageURL":"https://github.com/Ompragash.png","key":"ompragash"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["ompragash"],"tags":["community","blog","newuser","ompragash"]},"prevItem":{"title":"Harness CI Onboarding - Beginners Guide","permalink":"/blog/harness-ci-onboarding"}},"content":"Hey y\'all amazing users of Harness Community!\\n\\nNow, it\'s easy to submit your blog/articles and it\'s just a PR away!\\n\\nSimply create a PR by adding Markdown files (or folders) to the `blog` directory in [harness-community.github.io](https://github.com/harness-community/harness-community.github.io) repository!\\n\\nA blog post folder can be convenient to co-locate blog post images abd can be displayed like below:\\n\\n![Harness Community](./harnesser.png)\\n\\nOh and the other cool thing is, you can directly embed Youtube videos to your blog post and users can watch it on the same page and of course on a new tab if they want to;)\\n\\n<div className=\\"iframe-wrapper\\">\\n<iframe\\n    src=\\"https://www.youtube.com/embed/I4sbENt4IeM\\"\\n    frameborder=\\"0\\"\\n    allow=\\"autoplay; encrypted-media\\"\\n    allowfullscreen\\n>\\n</iframe>\\n</div>\\n\\nThe blog supports tags as well! so refer the list of available tags and add it to your blog post!\\n\\nStay tuned for more improvements as this site is still in development phase:)\\n\\nAny contributions are welcome!"}]}')}}]);